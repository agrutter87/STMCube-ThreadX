
STMCube-ThreadX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f94  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800324c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a94  20000010  0800325c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000aa4  0800325c  00020aa4  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d057  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002b06  00000000  00000000  0002d09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000998  00000000  00000000  0002fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000768  00000000  00000000  00030540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032dbc  00000000  00000000  00030ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e99b  00000000  00000000  00063a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001350b5  00000000  00000000  000723ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a74b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d60  00000000  00000000  001a7504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	080031b4 	.word	0x080031b4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	080031b4 	.word	0x080031b4

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4913      	ldr	r1, [pc, #76]	; (80002e0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	f649 413f 	movw	r1, #39999	; 0x9c3f
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002a0:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a4:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a6:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002aa:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ae:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b2:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b8:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002c0:	f7ff bffe 	b.w	80002c0 <__tx_BadHandler>

080002c4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002cc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ce:	f000 f895 	bl	80003fc <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d6:	4770      	bx	lr

080002d8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_NMIHandler>

080002dc <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002dc:	f7ff bffe 	b.w	80002dc <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002e0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e8:	20000498 	.word	0x20000498
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4824      	ldr	r0, [pc, #144]	; (80003b0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c1e      	ldr	r4, [pc, #120]	; (80003b8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c17      	ldr	r4, [pc, #92]	; (80003b8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b909      	cbnz	r1, 8000396 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 8000394:	e7f9      	b.n	800038a <__tx_ts_wait>

08000396 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000396:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800039a:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039e:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003a4:	e7d8      	b.n	8000358 <__tx_ts_restore>
 80003a6:	bf00      	nop

080003a8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003ac:	20000534 	.word	0x20000534
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b0:	2000049c 	.word	0x2000049c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b4:	200004a0 	.word	0x200004a0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b8:	20000aa0 	.word	0x20000aa0

080003bc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003bc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003be:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003c2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ca:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003cc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003d0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003d2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003da:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003dc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003de:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003e0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003e2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ee:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003f0:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f8:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr

080003fc <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	4922      	ldr	r1, [pc, #136]	; (8000488 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fe:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000400:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000404:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000408:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800040a:	b13a      	cbz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800040c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000410:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000412:	b91a      	cbnz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000416:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800041a:	6018      	str	r0, [r3, #0]

0800041c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800041c:	491d      	ldr	r1, [pc, #116]	; (8000494 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000420:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000422:	b122      	cbz	r2, 800042e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000426:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800042a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800042c:	e008      	b.n	8000440 <__tx_timer_done>

0800042e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000434:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000436:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000438:	d101      	bne.n	800043e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800043c:	6818      	ldr	r0, [r3, #0]

0800043e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043e:	6008      	str	r0, [r1, #0]

08000440 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000442:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000444:	b912      	cbnz	r2, 800044c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000448:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800044a:	b1c8      	cbz	r0, 8000480 <__tx_timer_nothing_expired>

0800044c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800044c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044e:	4912      	ldr	r1, [pc, #72]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000450:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000452:	b108      	cbz	r0, 8000458 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000454:	f002 fbac 	bl	8002bb0 <_tx_timer_expiration_process>

08000458 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800045c:	b172      	cbz	r2, 800047c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045e:	f002 fb19 	bl	8002a94 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000464:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000466:	b949      	cbnz	r1, 800047c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800046a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000470:	480f      	ldr	r0, [pc, #60]	; (80004b0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000476:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000478:	d000      	beq.n	800047c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800047a:	6002      	str	r2, [r0, #0]

0800047c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800047c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000480 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000480:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000484:	4770      	bx	lr
 8000486:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000488:	20000540 	.word	0x20000540
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800048c:	20000aa0 	.word	0x20000aa0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000490:	20000544 	.word	0x20000544
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000494:	200005d0 	.word	0x200005d0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	200005d4 	.word	0x200005d4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800049c:	200005cc 	.word	0x200005cc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004a0:	200005c8 	.word	0x200005c8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a4:	20000534 	.word	0x20000534
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a8:	2000049c 	.word	0x2000049c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004ac:	200004a0 	.word	0x200004a0
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b0:	e000ed04 	.word	0xe000ed04

080004b4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004c0:	2334      	movs	r3, #52	; 0x34
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <tx_application_define+0x40>)
 80004ca:	490b      	ldr	r1, [pc, #44]	; (80004f8 <tx_application_define+0x44>)
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <tx_application_define+0x48>)
 80004ce:	f002 fda5 	bl	800301c <_txe_byte_pool_create>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d109      	bne.n	80004ec <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <tx_application_define+0x48>)
 80004da:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004dc:	68b8      	ldr	r0, [r7, #8]
 80004de:	f000 f80f 	bl	8000500 <App_ThreadX_Init>
 80004e2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d000      	beq.n	80004ec <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004ea:	e7fe      	b.n	80004ea <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	080031cc 	.word	0x080031cc
 80004fc:	2000042c 	.word	0x2000042c

08000500 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800050c:	68fb      	ldr	r3, [r7, #12]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800051e:	f001 febf 	bl	80022a0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 f909 	bl	8000740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f807 	bl	8000540 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000532:	f000 f84e 	bl	80005d2 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 8000536:	f000 f858 	bl	80005ea <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800053a:	f7ff ffee 	bl	800051a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053e:	e7fe      	b.n	800053e <main+0x18>

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b09e      	sub	sp, #120	; 0x78
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2260      	movs	r2, #96	; 0x60
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fe28 	bl	80031a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]
 8000562:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fa6f 	bl	8000a48 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f84e 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000574:	2310      	movs	r3, #16
 8000576:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000586:	2300      	movs	r3, #0
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0318 	add.w	r3, r7, #24
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fb36 	bl	8000c00 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800059a:	f000 f839 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	231f      	movs	r3, #31
 80005a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f9fc 	bl	80019b8 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005c6:	f000 f823 	bl	8000610 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3778      	adds	r7, #120	; 0x78
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80005d6:	2002      	movs	r0, #2
 80005d8:	f000 fac2 	bl	8000b60 <HAL_PWREx_ConfigSupply>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemPower_Config+0x14>
  {
    Error_Handler();
 80005e2:	f000 f815 	bl	8000610 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}

080005ea <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f9fa 	bl	80009e8 <HAL_ICACHE_ConfigAssociativityMode>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80005fa:	f000 f809 	bl	8000610 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80005fe:	f000 fa13 	bl	8000a28 <HAL_ICACHE_Enable>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000608:	f000 f802 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_MspInit+0x30>)
 8000624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_MspInit+0x30>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_MspInit+0x30>)
 8000634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	46020c00 	.word	0x46020c00

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <SystemInit+0x68>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <SystemInit+0x68>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x6c>)
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x6c>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x6c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <SystemInit+0x6c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x6c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <SystemInit+0x6c>)
 80006ae:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006b2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <SystemInit+0x6c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <SystemInit+0x6c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <SystemInit+0x6c>)
 80006c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <SystemInit+0x6c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SystemInit+0x68>)
 80006d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d6:	609a      	str	r2, [r3, #8]
  #endif
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	46020c00 	.word	0x46020c00

080006ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000724 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f0:	f7ff ffc4 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006f6:	e003      	b.n	8000700 <LoopCopyDataInit>

080006f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006fe:	3104      	adds	r1, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000704:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000706:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000708:	d3f6      	bcc.n	80006f8 <CopyDataInit>
	ldr	r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopForever+0x12>)
	b	LoopFillZerobss
 800070c:	e002      	b.n	8000714 <LoopFillZerobss>

0800070e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800070e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000710:	f842 3b04 	str.w	r3, [r2], #4

08000714 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <LoopForever+0x16>)
	cmp	r2, r3
 8000716:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000718:	d3f9      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f002 fd1f 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071e:	f7ff ff02 	bl	8000526 <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000724:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000728:	0800324c 	.word	0x0800324c
	ldr	r0, =_sdata
 800072c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000730:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000734:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000738:	20000aa4 	.word	0x20000aa4

0800073c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_IRQHandler>
	...

08000740 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_Init+0x4c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <HAL_Init+0x4c>)
 800074a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f000 f917 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000756:	f001 fb21 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 800075a:	4602      	mov	r2, r0
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_Init+0x50>)
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	490b      	ldr	r1, [pc, #44]	; (8000794 <HAL_Init+0x54>)
 8000766:	5ccb      	ldrb	r3, [r1, r3]
 8000768:	fa22 f303 	lsr.w	r3, r2, r3
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_Init+0x58>)
 800076e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f813 	bl	800079c <HAL_InitTick>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e002      	b.n	8000786 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff ff4c 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000
 8000790:	46020c00 	.word	0x46020c00
 8000794:	080031f4 	.word	0x080031f4
 8000798:	20000000 	.word	0x20000000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_InitTick+0x60>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e021      	b.n	80007f4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_InitTick+0x64>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_InitTick+0x60>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f901 	bl	80009ce <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f8d9 	bl	800099a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x68>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000000 	.word	0x20000000
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000460 	.word	0x20000460

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	; 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000950:	d301      	bcc.n	8000956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e00f      	b.n	8000976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <SysTick_Config+0x40>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	210f      	movs	r1, #15
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff ff8e 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <SysTick_Config+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <SysTick_Config+0x40>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff47 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009a8:	f7ff ff5e 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	68b9      	ldr	r1, [r7, #8]
 80009b2:	6978      	ldr	r0, [r7, #20]
 80009b4:	f7ff ff90 	bl	80008d8 <NVIC_EncodePriority>
 80009b8:	4602      	mov	r2, r0
 80009ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff5f 	bl	8000884 <__NVIC_SetPriority>
}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffb2 	bl	8000940 <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	e007      	b.n	8000a16 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f023 0204 	bic.w	r2, r3, #4
 8000a0e:	4905      	ldr	r1, [pc, #20]	; (8000a24 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40030400 	.word	0x40030400

08000a28 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_ICACHE_Enable+0x1c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_ICACHE_Enable+0x1c>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40030400 	.word	0x40030400

08000a48 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a58:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d10b      	bne.n	8000a7a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a68:	d905      	bls.n	8000a76 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e057      	b.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a80:	d90a      	bls.n	8000a98 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a94:	60d3      	str	r3, [r2, #12]
 8000a96:	e007      	b.n	8000aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000aa0:	4925      	ldr	r1, [pc, #148]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a24      	ldr	r2, [pc, #144]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	099b      	lsrs	r3, r3, #6
 8000ab4:	2232      	movs	r2, #50	; 0x32
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	099b      	lsrs	r3, r3, #6
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000ac6:	e002      	b.n	8000ace <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f3      	bne.n	8000ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d01b      	beq.n	8000b1e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	099b      	lsrs	r3, r3, #6
 8000af2:	2232      	movs	r2, #50	; 0x32
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	099b      	lsrs	r3, r3, #6
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000b04:	e002      	b.n	8000b0c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1f3      	bne.n	8000b06 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e000      	b.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	46020800 	.word	0x46020800
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	10624dd3 	.word	0x10624dd3

08000b44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	46020800 	.word	0x46020800

08000b60 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <HAL_PWREx_ConfigSupply+0x94>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_PWREx_ConfigSupply+0x98>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	099b      	lsrs	r3, r3, #6
 8000b74:	2232      	movs	r2, #50	; 0x32
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <HAL_PWREx_ConfigSupply+0x98>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	099b      	lsrs	r3, r3, #6
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d113      	bne.n	8000bb4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000b98:	e002      	b.n	8000ba0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_PWREx_ConfigSupply+0x9c>)
 8000ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d116      	bne.n	8000bda <HAL_PWREx_ConfigSupply+0x7a>
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f3      	bne.n	8000b9a <HAL_PWREx_ConfigSupply+0x3a>
 8000bb2:	e012      	b.n	8000bda <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_PWREx_ConfigSupply+0x9c>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_PWREx_ConfigSupply+0x9c>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000bc0:	e002      	b.n	8000bc8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_PWREx_ConfigSupply+0x9c>)
 8000bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_PWREx_ConfigSupply+0x7a>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f3      	bne.n	8000bc2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e000      	b.n	8000be6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	10624dd3 	.word	0x10624dd3
 8000bfc:	46020800 	.word	0x46020800

08000c00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	f000 bec8 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c1a:	4b99      	ldr	r3, [pc, #612]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c24:	4b96      	ldr	r3, [pc, #600]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 816c 	beq.w	8000f14 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <HAL_RCC_OscConfig+0x52>
 8000c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c44:	2b0c      	cmp	r3, #12
 8000c46:	f040 80de 	bne.w	8000e06 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f040 80da 	bne.w	8000e06 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f000 bea5 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c64:	4b86      	ldr	r3, [pc, #536]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <HAL_RCC_OscConfig+0x7a>
 8000c70:	4b83      	ldr	r3, [pc, #524]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000c78:	e005      	b.n	8000c86 <HAL_RCC_OscConfig+0x86>
 8000c7a:	4b81      	ldr	r3, [pc, #516]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c80:	041b      	lsls	r3, r3, #16
 8000c82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d255      	bcs.n	8000d36 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10a      	bne.n	8000ca6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 f9a3 	bl	8001fe0 <RCC_SetFlashLatencyFromMSIRange>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f000 be82 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000ca6:	4b76      	ldr	r3, [pc, #472]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	4a75      	ldr	r2, [pc, #468]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cb0:	6093      	str	r3, [r2, #8]
 8000cb2:	4b73      	ldr	r3, [pc, #460]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	4970      	ldr	r1, [pc, #448]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000ccc:	d309      	bcc.n	8000ce2 <HAL_RCC_OscConfig+0xe2>
 8000cce:	4b6c      	ldr	r3, [pc, #432]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	f023 021f 	bic.w	r2, r3, #31
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	4969      	ldr	r1, [pc, #420]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	60cb      	str	r3, [r1, #12]
 8000ce0:	e07e      	b.n	8000de0 <HAL_RCC_OscConfig+0x1e0>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da0a      	bge.n	8000d00 <HAL_RCC_OscConfig+0x100>
 8000cea:	4b65      	ldr	r3, [pc, #404]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	015b      	lsls	r3, r3, #5
 8000cf8:	4961      	ldr	r1, [pc, #388]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
 8000cfe:	e06f      	b.n	8000de0 <HAL_RCC_OscConfig+0x1e0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d08:	d30a      	bcc.n	8000d20 <HAL_RCC_OscConfig+0x120>
 8000d0a:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	029b      	lsls	r3, r3, #10
 8000d18:	4959      	ldr	r1, [pc, #356]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60cb      	str	r3, [r1, #12]
 8000d1e:	e05f      	b.n	8000de0 <HAL_RCC_OscConfig+0x1e0>
 8000d20:	4b57      	ldr	r3, [pc, #348]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	03db      	lsls	r3, r3, #15
 8000d2e:	4954      	ldr	r1, [pc, #336]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
 8000d34:	e054      	b.n	8000de0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000d36:	4b52      	ldr	r3, [pc, #328]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4a51      	ldr	r2, [pc, #324]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d40:	6093      	str	r3, [r2, #8]
 8000d42:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	494c      	ldr	r1, [pc, #304]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d5c:	d309      	bcc.n	8000d72 <HAL_RCC_OscConfig+0x172>
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	f023 021f 	bic.w	r2, r3, #31
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a1b      	ldr	r3, [r3, #32]
 8000d6a:	4945      	ldr	r1, [pc, #276]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	60cb      	str	r3, [r1, #12]
 8000d70:	e028      	b.n	8000dc4 <HAL_RCC_OscConfig+0x1c4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	da0a      	bge.n	8000d90 <HAL_RCC_OscConfig+0x190>
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	015b      	lsls	r3, r3, #5
 8000d88:	493d      	ldr	r1, [pc, #244]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60cb      	str	r3, [r1, #12]
 8000d8e:	e019      	b.n	8000dc4 <HAL_RCC_OscConfig+0x1c4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d98:	d30a      	bcc.n	8000db0 <HAL_RCC_OscConfig+0x1b0>
 8000d9a:	4b39      	ldr	r3, [pc, #228]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	029b      	lsls	r3, r3, #10
 8000da8:	4935      	ldr	r1, [pc, #212]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60cb      	str	r3, [r1, #12]
 8000dae:	e009      	b.n	8000dc4 <HAL_RCC_OscConfig+0x1c4>
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	03db      	lsls	r3, r3, #15
 8000dbe:	4930      	ldr	r1, [pc, #192]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10a      	bne.n	8000de0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 f906 	bl	8001fe0 <RCC_SetFlashLatencyFromMSIRange>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f000 bde5 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8000de0:	f001 f8e4 	bl	8001fac <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <HAL_RCC_OscConfig+0x284>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fcd7 	bl	800079c <HAL_InitTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8000df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 808a 	beq.w	8000f12 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8000dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e02:	f000 bdd2 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d066      	beq.n	8000edc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000e1a:	f7ff fcf5 	bl	8000808 <HAL_GetTick>
 8000e1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000e20:	e009      	b.n	8000e36 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e22:	f7ff fcf1 	bl	8000808 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d902      	bls.n	8000e36 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f000 bdba 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0ef      	beq.n	8000e22 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e4c:	6093      	str	r3, [r2, #8]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	4909      	ldr	r1, [pc, #36]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000e68:	d30e      	bcc.n	8000e88 <HAL_RCC_OscConfig+0x288>
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f023 021f 	bic.w	r2, r3, #31
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	4902      	ldr	r1, [pc, #8]	; (8000e80 <HAL_RCC_OscConfig+0x280>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60cb      	str	r3, [r1, #12]
 8000e7c:	e04a      	b.n	8000f14 <HAL_RCC_OscConfig+0x314>
 8000e7e:	bf00      	nop
 8000e80:	46020c00 	.word	0x46020c00
 8000e84:	20000004 	.word	0x20000004
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	da0a      	bge.n	8000ea6 <HAL_RCC_OscConfig+0x2a6>
 8000e90:	4b98      	ldr	r3, [pc, #608]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	015b      	lsls	r3, r3, #5
 8000e9e:	4995      	ldr	r1, [pc, #596]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60cb      	str	r3, [r1, #12]
 8000ea4:	e036      	b.n	8000f14 <HAL_RCC_OscConfig+0x314>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eae:	d30a      	bcc.n	8000ec6 <HAL_RCC_OscConfig+0x2c6>
 8000eb0:	4b90      	ldr	r3, [pc, #576]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	498d      	ldr	r1, [pc, #564]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60cb      	str	r3, [r1, #12]
 8000ec4:	e026      	b.n	8000f14 <HAL_RCC_OscConfig+0x314>
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	03db      	lsls	r3, r3, #15
 8000ed4:	4987      	ldr	r1, [pc, #540]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60cb      	str	r3, [r1, #12]
 8000eda:	e01b      	b.n	8000f14 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8000edc:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a84      	ldr	r2, [pc, #528]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc8e 	bl	8000808 <HAL_GetTick>
 8000eec:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000eee:	e009      	b.n	8000f04 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fc8a 	bl	8000808 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d902      	bls.n	8000f04 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f000 bd53 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000f04:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ef      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2f0>
 8000f10:	e000      	b.n	8000f14 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000f12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 808b 	beq.w	8001038 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d005      	beq.n	8000f34 <HAL_RCC_OscConfig+0x334>
 8000f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d109      	bne.n	8000f42 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d17d      	bne.n	8001038 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f000 bd34 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4a:	d106      	bne.n	8000f5a <HAL_RCC_OscConfig+0x35a>
 8000f4c:	4b69      	ldr	r3, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a68      	ldr	r2, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e041      	b.n	8000fde <HAL_RCC_OscConfig+0x3de>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f62:	d112      	bne.n	8000f8a <HAL_RCC_OscConfig+0x38a>
 8000f64:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a62      	ldr	r2, [pc, #392]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b60      	ldr	r3, [pc, #384]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a5f      	ldr	r2, [pc, #380]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a5c      	ldr	r2, [pc, #368]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e029      	b.n	8000fde <HAL_RCC_OscConfig+0x3de>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000f92:	d112      	bne.n	8000fba <HAL_RCC_OscConfig+0x3ba>
 8000f94:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b54      	ldr	r3, [pc, #336]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a53      	ldr	r2, [pc, #332]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e011      	b.n	8000fde <HAL_RCC_OscConfig+0x3de>
 8000fba:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a4d      	ldr	r2, [pc, #308]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b48      	ldr	r3, [pc, #288]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a47      	ldr	r2, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000fdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d014      	beq.n	8001010 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fc0f 	bl	8000808 <HAL_GetTick>
 8000fea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fec:	e009      	b.n	8001002 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fee:	f7ff fc0b 	bl	8000808 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d902      	bls.n	8001002 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	f000 bcd4 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0ef      	beq.n	8000fee <HAL_RCC_OscConfig+0x3ee>
 800100e:	e013      	b.n	8001038 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001010:	f7ff fbfa 	bl	8000808 <HAL_GetTick>
 8001014:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	e009      	b.n	800102c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fbf6 	bl	8000808 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d902      	bls.n	800102c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	f000 bcbf 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1ef      	bne.n	8001018 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d05f      	beq.n	8001104 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001046:	2b04      	cmp	r3, #4
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x456>
 800104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d114      	bne.n	800107a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001052:	2b02      	cmp	r3, #2
 8001054:	d111      	bne.n	800107a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	f000 bca3 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	041b      	lsls	r3, r3, #16
 8001072:	4920      	ldr	r1, [pc, #128]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	4313      	orrs	r3, r2
 8001076:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001078:	e044      	b.n	8001104 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d024      	beq.n	80010cc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800108e:	f7ff fbbb 	bl	8000808 <HAL_GetTick>
 8001092:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001094:	e009      	b.n	80010aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fbb7 	bl	8000808 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d902      	bls.n	80010aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f000 bc80 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0ef      	beq.n	8001096 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	041b      	lsls	r3, r3, #16
 80010c4:	490b      	ldr	r1, [pc, #44]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	610b      	str	r3, [r1, #16]
 80010ca:	e01b      	b.n	8001104 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80010d8:	f7ff fb96 	bl	8000808 <HAL_GetTick>
 80010dc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fb92 	bl	8000808 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d904      	bls.n	80010f8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f000 bc5b 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
 80010f4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f8:	4baf      	ldr	r3, [pc, #700]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ed      	bne.n	80010e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80c8 	beq.w	80012a2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001118:	4ba7      	ldr	r3, [pc, #668]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800111a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d111      	bne.n	800114a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4ba4      	ldr	r3, [pc, #656]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	4aa2      	ldr	r2, [pc, #648]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001136:	4ba0      	ldr	r3, [pc, #640]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001144:	2301      	movs	r3, #1
 8001146:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800114a:	4b9c      	ldr	r3, [pc, #624]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d119      	bne.n	800118a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001156:	4b99      	ldr	r3, [pc, #612]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	4a98      	ldr	r2, [pc, #608]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fb51 	bl	8000808 <HAL_GetTick>
 8001166:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001168:	e009      	b.n	800117e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fb4d 	bl	8000808 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d902      	bls.n	800117e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	f000 bc16 	b.w	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800117e:	4b8f      	ldr	r3, [pc, #572]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0ef      	beq.n	800116a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d05f      	beq.n	8001252 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001192:	4b89      	ldr	r3, [pc, #548]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001198:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d037      	beq.n	8001218 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e3f4      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d01b      	beq.n	8001202 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80011ca:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80011cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d0:	4a79      	ldr	r2, [pc, #484]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80011d2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80011d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80011da:	f7ff fb15 	bl	8000808 <HAL_GetTick>
 80011de:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fb11 	bl	8000808 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e3da      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011f4:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80011f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ef      	bne.n	80011e2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001202:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001208:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4969      	ldr	r1, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001212:	4313      	orrs	r3, r2
 8001214:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001218:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800121a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800121e:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001224:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001228:	f7ff faee 	bl	8000808 <HAL_GetTick>
 800122c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff faea 	bl	8000808 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b05      	cmp	r3, #5
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e3b3      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0ef      	beq.n	8001230 <HAL_RCC_OscConfig+0x630>
 8001250:	e01b      	b.n	800128a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001252:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001258:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800125a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800125e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001262:	f7ff fad1 	bl	8000808 <HAL_GetTick>
 8001266:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126a:	f7ff facd 	bl	8000808 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b05      	cmp	r3, #5
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e396      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800127c:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800127e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1ef      	bne.n	800126a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800128a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001298:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800129a:	f023 0304 	bic.w	r3, r3, #4
 800129e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8111 	beq.w	80014d2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b6:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80012b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d111      	bne.n	80012e8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 80012d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012e8:	4b34      	ldr	r3, [pc, #208]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d118      	bne.n	8001326 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	4a30      	ldr	r2, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001300:	f7ff fa82 	bl	8000808 <HAL_GetTick>
 8001304:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001308:	f7ff fa7e 	bl	8000808 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e347      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_RCC_OscConfig+0x7bc>)
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01f      	beq.n	8001372 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	d010      	beq.n	8001360 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800135e:	e018      	b.n	8001392 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001370:	e00f      	b.n	8001392 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 8001384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_RCC_OscConfig+0x7b8>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d057      	beq.n	800144a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800139a:	f7ff fa35 	bl	8000808 <HAL_GetTick>
 800139e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a0:	e00e      	b.n	80013c0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fa31 	bl	8000808 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d905      	bls.n	80013c0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e2f8      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
 80013b8:	46020c00 	.word	0x46020c00
 80013bc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013c0:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80013c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0e9      	beq.n	80013a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d01b      	beq.n	8001412 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013da:	4b96      	ldr	r3, [pc, #600]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80013dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013e0:	4a94      	ldr	r2, [pc, #592]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80013e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f7ff fa0c 	bl	8000808 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e2d3      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001402:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0ed      	beq.n	80013ec <HAL_RCC_OscConfig+0x7ec>
 8001410:	e053      	b.n	80014ba <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001418:	4a86      	ldr	r2, [pc, #536]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800141a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800141e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff f9f0 	bl	8000808 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e2b7      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800143a:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800143c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ed      	bne.n	8001424 <HAL_RCC_OscConfig+0x824>
 8001448:	e037      	b.n	80014ba <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800144a:	f7ff f9dd 	bl	8000808 <HAL_GetTick>
 800144e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff f9d9 	bl	8000808 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e2a0      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001468:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800146a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ed      	bne.n	8001452 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001476:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800147c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01a      	beq.n	80014ba <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800148a:	4a6a      	ldr	r2, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800148c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001490:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff f9b7 	bl	8000808 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e27e      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80014ac:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80014ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ed      	bne.n	8001496 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80014c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c8:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d036      	beq.n	800154c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80014f2:	f7ff f989 	bl	8000808 <HAL_GetTick>
 80014f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014fa:	f7ff f985 	bl	8000808 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e24e      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800150c:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x8fa>
 8001518:	e018      	b.n	800154c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a45      	ldr	r2, [pc, #276]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001524:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001526:	f7ff f96f 	bl	8000808 <HAL_GetTick>
 800152a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152e:	f7ff f96b 	bl	8000808 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e234      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001540:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	d036      	beq.n	80015c6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	2b00      	cmp	r3, #0
 800155e:	d019      	beq.n	8001594 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800156c:	f7ff f94c 	bl	8000808 <HAL_GetTick>
 8001570:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001574:	f7ff f948 	bl	8000808 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e211      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x974>
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800159a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800159e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80015a0:	f7ff f932 	bl	8000808 <HAL_GetTick>
 80015a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80015a8:	f7ff f92e 	bl	8000808 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1f7      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d07f      	beq.n	80016d2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d062      	beq.n	80016a0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80015e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e4:	6093      	str	r3, [r2, #8]
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	4910      	ldr	r1, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001600:	d309      	bcc.n	8001616 <HAL_RCC_OscConfig+0xa16>
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f023 021f 	bic.w	r2, r3, #31
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4909      	ldr	r1, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001610:	4313      	orrs	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
 8001614:	e02a      	b.n	800166c <HAL_RCC_OscConfig+0xa6c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	2b00      	cmp	r3, #0
 800161c:	da0c      	bge.n	8001638 <HAL_RCC_OscConfig+0xa38>
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	015b      	lsls	r3, r3, #5
 800162c:	4901      	ldr	r1, [pc, #4]	; (8001634 <HAL_RCC_OscConfig+0xa34>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
 8001632:	e01b      	b.n	800166c <HAL_RCC_OscConfig+0xa6c>
 8001634:	46020c00 	.word	0x46020c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001640:	d30a      	bcc.n	8001658 <HAL_RCC_OscConfig+0xa58>
 8001642:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	029b      	lsls	r3, r3, #10
 8001650:	499d      	ldr	r1, [pc, #628]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001652:	4313      	orrs	r3, r2
 8001654:	60cb      	str	r3, [r1, #12]
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0xa6c>
 8001658:	4b9b      	ldr	r3, [pc, #620]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	03db      	lsls	r3, r3, #15
 8001666:	4998      	ldr	r1, [pc, #608]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001668:	4313      	orrs	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800166c:	4b96      	ldr	r3, [pc, #600]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a95      	ldr	r2, [pc, #596]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001678:	f7ff f8c6 	bl	8000808 <HAL_GetTick>
 800167c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001680:	f7ff f8c2 	bl	8000808 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e18b      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001692:	4b8d      	ldr	r3, [pc, #564]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0xa80>
 800169e:	e018      	b.n	80016d2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80016a0:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a88      	ldr	r2, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80016a6:	f023 0310 	bic.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80016ac:	f7ff f8ac 	bl	8000808 <HAL_GetTick>
 80016b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80016b4:	f7ff f8a8 	bl	8000808 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e171      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80016c6:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8166 	beq.w	80019a8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e2:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	f000 80f2 	beq.w	80018d4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	f040 80c5 	bne.w	8001884 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a72      	ldr	r2, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001704:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001706:	f7ff f87f 	bl	8000808 <HAL_GetTick>
 800170a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff f87b 	bl	8000808 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e144      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001720:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172c:	4b66      	ldr	r3, [pc, #408]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d111      	bne.n	800175e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001740:	4a61      	ldr	r2, [pc, #388]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800174a:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800174c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001758:	2301      	movs	r3, #1
 800175a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800175e:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0xccc>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800176a:	d102      	bne.n	8001772 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001772:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_RCC_OscConfig+0xccc>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a55      	ldr	r2, [pc, #340]	; (80018cc <HAL_RCC_OscConfig+0xccc>)
 8001778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001792:	3a01      	subs	r2, #1
 8001794:	0212      	lsls	r2, r2, #8
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800179c:	430a      	orrs	r2, r1
 800179e:	494a      	ldr	r1, [pc, #296]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	628b      	str	r3, [r1, #40]	; 0x28
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a8:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCC_OscConfig+0xcd0>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017b0:	3a01      	subs	r2, #1
 80017b2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017ba:	3a01      	subs	r2, #1
 80017bc:	0252      	lsls	r2, r2, #9
 80017be:	b292      	uxth	r2, r2
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017c6:	3a01      	subs	r2, #1
 80017c8:	0412      	lsls	r2, r2, #16
 80017ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80017d4:	3a01      	subs	r2, #1
 80017d6:	0612      	lsls	r2, r2, #24
 80017d8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80017dc:	430a      	orrs	r2, r1
 80017de:	493a      	ldr	r1, [pc, #232]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	4a37      	ldr	r2, [pc, #220]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017ea:	f023 0310 	bic.w	r3, r3, #16
 80017ee:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	f023 020c 	bic.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	492d      	ldr	r1, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001814:	4313      	orrs	r3, r2
 8001816:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_OscConfig+0xccc>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_RCC_OscConfig+0xccc>)
 8001826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800182c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800184a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800185c:	f7fe ffd4 	bl	8000808 <HAL_GetTick>
 8001860:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7fe ffd0 	bl	8000808 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e099      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xc64>
 8001882:	e091      	b.n	80019a8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 800188a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800188e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001890:	f7fe ffba 	bl	8000808 <HAL_GetTick>
 8001894:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7fe ffb6 	bl	8000808 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e07f      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_RCC_OscConfig+0xcc8>)
 80018bc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80018c0:	f023 0303 	bic.w	r3, r3, #3
 80018c4:	6293      	str	r3, [r2, #40]	; 0x28
 80018c6:	e06f      	b.n	80019a8 <HAL_RCC_OscConfig+0xda8>
 80018c8:	46020c00 	.word	0x46020c00
 80018cc:	46020800 	.word	0x46020800
 80018d0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 80018dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018de:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d039      	beq.n	800195c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d132      	bne.n	800195c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d129      	bne.n	800195c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d122      	bne.n	800195c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001920:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d11a      	bne.n	800195c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	0a5b      	lsrs	r3, r3, #9
 800192a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d111      	bne.n	800195c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001944:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	0e1b      	lsrs	r3, r3, #24
 800194e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e024      	b.n	80019aa <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800196e:	429a      	cmp	r2, r3
 8001970:	d01a      	beq.n	80019a8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 8001978:	f023 0310 	bic.w	r3, r3, #16
 800197c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7fe ff43 	bl	8000808 <HAL_GetTick>
 8001982:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001984:	bf00      	nop
 8001986:	f7fe ff3f 	bl	8000808 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	4293      	cmp	r3, r2
 8001990:	d0f9      	beq.n	8001986 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_RCC_OscConfig+0xdb4>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3738      	adds	r7, #56	; 0x38
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	46020c00 	.word	0x46020c00

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e1d9      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b9b      	ldr	r3, [pc, #620]	; (8001c3c <HAL_RCC_ClockConfig+0x284>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d910      	bls.n	80019fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b98      	ldr	r3, [pc, #608]	; (8001c3c <HAL_RCC_ClockConfig+0x284>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 020f 	bic.w	r2, r3, #15
 80019e2:	4996      	ldr	r1, [pc, #600]	; (8001c3c <HAL_RCC_ClockConfig+0x284>)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <HAL_RCC_ClockConfig+0x284>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e1c1      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d908      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001a18:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	4986      	ldr	r1, [pc, #536]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d012      	beq.n	8001a5c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d909      	bls.n	8001a5c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001a48:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	497a      	ldr	r1, [pc, #488]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4b74      	ldr	r3, [pc, #464]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d908      	bls.n	8001a8a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	496e      	ldr	r1, [pc, #440]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001aa6:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f023 020f 	bic.w	r2, r3, #15
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4963      	ldr	r1, [pc, #396]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80d2 	beq.w	8001c6a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d143      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d110      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae6:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001b02:	f7fe fe81 	bl	8000808 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001b08:	4b4e      	ldr	r3, [pc, #312]	; (8001c44 <HAL_RCC_ClockConfig+0x28c>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00f      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001b16:	f7fe fe77 	bl	8000808 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e12b      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_RCC_ClockConfig+0x28c>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b42:	f023 0304 	bic.w	r3, r3, #4
 8001b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e112      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e106      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0fa      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0f2      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4926      	ldr	r1, [pc, #152]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001bac:	f7fe fe2c 	bl	8000808 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d112      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7fe fe24 	bl	8000808 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0d6      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d1ee      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x204>
 8001bde:	e044      	b.n	8001c6a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d112      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7fe fe0d 	bl	8000808 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0bf      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_ClockConfig+0x232>
 8001c0c:	e02d      	b.n	8001c6a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d123      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7fe fdf6 	bl	8000808 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0a8      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x260>
 8001c3a:	e016      	b.n	8001c6a <HAL_RCC_ClockConfig+0x2b2>
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	46020c00 	.word	0x46020c00
 8001c44:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7fe fdde 	bl	8000808 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e090      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d1ee      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d208      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	f023 020f 	bic.w	r2, r3, #15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	493d      	ldr	r1, [pc, #244]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b3c      	ldr	r3, [pc, #240]	; (8001d8c <HAL_RCC_ClockConfig+0x3d4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d210      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCC_ClockConfig+0x3d4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 020f 	bic.w	r2, r3, #15
 8001cae:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_RCC_ClockConfig+0x3d4>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_RCC_ClockConfig+0x3d4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e05b      	b.n	8001d80 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d208      	bcs.n	8001cf6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4925      	ldr	r1, [pc, #148]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d209      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4919      	ldr	r1, [pc, #100]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d208      	bcs.n	8001d56 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	490d      	ldr	r1, [pc, #52]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d56:	f000 f821 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x3d0>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	490a      	ldr	r1, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x3d8>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x3dc>)
 8001d6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x3e0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fd11 	bl	800079c <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	46020c00 	.word	0x46020c00
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	080031f4 	.word	0x080031f4
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000004 	.word	0x20000004

08001d9c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001daa:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db4:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d121      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d11e      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001dd0:	4b71      	ldr	r3, [pc, #452]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001ddc:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001de2:	0b1b      	lsrs	r3, r3, #12
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	0f1b      	lsrs	r3, r3, #28
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001df8:	4a68      	ldr	r2, [pc, #416]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d110      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e0c:	e00d      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0e:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1a:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1c:	623b      	str	r3, [r7, #32]
 8001e1e:	e004      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e28:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	f040 80ac 	bne.w	8001f8a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	fb02 f303 	mul.w	r3, r2, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8086 	beq.w	8001f86 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d003      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xec>
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d022      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x130>
 8001e86:	e043      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e92:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001fa4 <HAL_RCC_GetSysClockFreq+0x208>
 8001e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e9a:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001eaa:	ed97 6a01 	vldr	s12, [r7, #4]
 8001eae:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001fa8 <HAL_RCC_GetSysClockFreq+0x20c>
 8001eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8001eca:	e046      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001fa4 <HAL_RCC_GetSysClockFreq+0x208>
 8001eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001eee:	ed97 6a01 	vldr	s12, [r7, #4]
 8001ef2:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001fa8 <HAL_RCC_GetSysClockFreq+0x20c>
 8001ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8001f0e:	e024      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f38:	ed97 6a01 	vldr	s12, [r7, #4]
 8001f3c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8001fa8 <HAL_RCC_GetSysClockFreq+0x20c>
 8001f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8001f58:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5e:	0e1b      	lsrs	r3, r3, #24
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f64:	3301      	adds	r3, #1
 8001f66:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f72:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7e:	ee17 3a90 	vmov	r3, s15
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	e001      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	372c      	adds	r7, #44	; 0x2c
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	46020c00 	.word	0x46020c00
 8001f9c:	08003204 	.word	0x08003204
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	4b742400 	.word	0x4b742400
 8001fa8:	46000000 	.word	0x46000000

08001fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fb0:	f7ff fef4 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x28>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x30>)
 8001fc8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x30>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	46020c00 	.word	0x46020c00
 8001fd8:	080031f4 	.word	0x080031f4
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ff6:	f7fe fda5 	bl	8000b44 <HAL_PWREx_GetVoltageRange>
 8001ffa:	6178      	str	r0, [r7, #20]
 8001ffc:	e019      	b.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002004:	4a37      	ldr	r2, [pc, #220]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7fe fd92 	bl	8000b44 <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002028:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800202a:	f023 0304 	bic.w	r3, r3, #4
 800202e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002038:	d003      	beq.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002040:	d109      	bne.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002048:	d202      	bcs.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800204a:	2301      	movs	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800204e:	e033      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002054:	e030      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800205c:	d208      	bcs.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d102      	bne.n	800206c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002066:	2303      	movs	r3, #3
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	e025      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e035      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002076:	d90f      	bls.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002084:	d902      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e015      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	e012      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e00f      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800209e:	d109      	bne.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	d102      	bne.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e004      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80020ae:	2302      	movs	r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e001      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 020f 	bic.w	r2, r3, #15
 80020c0:	4909      	ldr	r1, [pc, #36]	; (80020e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	46020c00 	.word	0x46020c00
 80020e8:	40022000 	.word	0x40022000

080020ec <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80020fa:	2234      	movs	r2, #52	; 0x34
 80020fc:	2100      	movs	r1, #0
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 f850 	bl	80031a4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f1a3 0208 	sub.w	r2, r3, #8
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2202      	movs	r2, #2
 8002138:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800213e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4413      	add	r3, r2
 8002144:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	3b04      	subs	r3, #4
 800214a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002158:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215c:	3b04      	subs	r3, #4
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002176:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	3304      	adds	r3, #4
 8002180:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <_tx_byte_pool_create+0x11c>)
 800218a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002192:	f3ef 8310 	mrs	r3, PRIMASK
 8002196:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8002198:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800219a:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800219c:	b672      	cpsid	i
#endif
    return(int_posture);
 800219e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <_tx_byte_pool_create+0x120>)
 80021a6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <_tx_byte_pool_create+0x124>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80021b0:	4a18      	ldr	r2, [pc, #96]	; (8002214 <_tx_byte_pool_create+0x128>)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
 80021c2:	e011      	b.n	80021e8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <_tx_byte_pool_create+0x128>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <_tx_byte_pool_create+0x124>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <_tx_byte_pool_create+0x124>)
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f383 8810 	msr	PRIMASK, r3
}
 80021fc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3738      	adds	r7, #56	; 0x38
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	ffffeeee 	.word	0xffffeeee
 800220c:	42595445 	.word	0x42595445
 8002210:	20000490 	.word	0x20000490
 8002214:	2000048c 	.word	0x2000048c

08002218 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800221c:	f000 f960 	bl	80024e0 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8002220:	f000 fce8 	bl	8002bf4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <_tx_initialize_high_level+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <_tx_initialize_high_level+0x5c>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <_tx_initialize_high_level+0x60>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <_tx_initialize_high_level+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <_tx_initialize_high_level+0x68>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_tx_initialize_high_level+0x6c>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <_tx_initialize_high_level+0x70>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <_tx_initialize_high_level+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <_tx_initialize_high_level+0x78>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <_tx_initialize_high_level+0x7c>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <_tx_initialize_high_level+0x80>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <_tx_initialize_high_level+0x84>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
#endif
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000464 	.word	0x20000464
 8002274:	20000468 	.word	0x20000468
 8002278:	2000046c 	.word	0x2000046c
 800227c:	20000470 	.word	0x20000470
 8002280:	20000474 	.word	0x20000474
 8002284:	20000478 	.word	0x20000478
 8002288:	20000484 	.word	0x20000484
 800228c:	20000488 	.word	0x20000488
 8002290:	2000048c 	.word	0x2000048c
 8002294:	20000490 	.word	0x20000490
 8002298:	2000047c 	.word	0x2000047c
 800229c:	20000480 	.word	0x20000480

080022a0 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <_tx_initialize_kernel_enter+0x48>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80022ac:	d00c      	beq.n	80022c8 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <_tx_initialize_kernel_enter+0x48>)
 80022b0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80022b4:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80022b6:	f7fd ffdf 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80022ba:	f7ff ffad 	bl	8002218 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <_tx_initialize_kernel_enter+0x4c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a09      	ldr	r2, [pc, #36]	; (80022ec <_tx_initialize_kernel_enter+0x4c>)
 80022c6:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <_tx_initialize_kernel_enter+0x48>)
 80022ca:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80022ce:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_tx_initialize_kernel_enter+0x50>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f8ed 	bl	80004b4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <_tx_initialize_kernel_enter+0x48>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80022e0:	f7fe f806 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	20000534 	.word	0x20000534
 80022f0:	20000494 	.word	0x20000494

080022f4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b092      	sub	sp, #72	; 0x48
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8002302:	2300      	movs	r3, #0
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8002306:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002308:	21ef      	movs	r1, #239	; 0xef
 800230a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800230c:	f000 ff4a 	bl	80031a4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8002310:	22b0      	movs	r2, #176	; 0xb0
 8002312:	2100      	movs	r1, #0
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 ff45 	bl	80031a4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002330:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002336:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002342:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800234a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002350:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800235a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	3b01      	subs	r3, #1
 8002362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002364:	4413      	add	r3, r2
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800236c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800236e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	429a      	cmp	r2, r3
 8002374:	d007      	beq.n	8002386 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002384:	e006      	b.n	8002394 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002390:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2203      	movs	r2, #3
 8002398:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a48      	ldr	r2, [pc, #288]	; (80024c0 <_tx_thread_create+0x1cc>)
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80023a6:	4947      	ldr	r1, [pc, #284]	; (80024c4 <_tx_thread_create+0x1d0>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7fe f807 	bl	80003bc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80023ae:	f3ef 8310 	mrs	r3, PRIMASK
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80023b8:	b672      	cpsid	i
    return(int_posture);
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <_tx_thread_create+0x1d4>)
 80023c2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <_tx_thread_create+0x1d8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80023cc:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <_tx_thread_create+0x1dc>)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80023e2:	e016      	b.n	8002412 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80023e4:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <_tx_thread_create+0x1dc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <_tx_thread_create+0x1d8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <_tx_thread_create+0x1d8>)
 800241a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <_tx_thread_create+0x1e0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <_tx_thread_create+0x1e0>)
 8002424:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8002426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002428:	2b01      	cmp	r3, #1
 800242a:	d129      	bne.n	8002480 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800242c:	f3ef 8305 	mrs	r3, IPSR
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8002432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <_tx_thread_create+0x1e4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4313      	orrs	r3, r2
 800243a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800243e:	d30d      	bcc.n	800245c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <_tx_thread_create+0x1e8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800244c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8002452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c
 800245a:	e001      	b.n	8002460 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f383 8810 	msr	PRIMASK, r3
}
 800246a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f8f9 	bl	8002664 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8002472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01e      	beq.n	80024b6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c
 800247e:	e01a      	b.n	80024b6 <_tx_thread_create+0x1c2>
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f383 8810 	msr	PRIMASK, r3
}
 800248a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800248c:	f3ef 8310 	mrs	r3, PRIMASK
 8002490:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002492:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002494:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002496:	b672      	cpsid	i
    return(int_posture);
 8002498:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <_tx_thread_create+0x1e0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <_tx_thread_create+0x1e0>)
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f383 8810 	msr	PRIMASK, r3
}
 80024b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80024b2:	f000 f89d 	bl	80025f0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3748      	adds	r7, #72	; 0x48
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	08002b39 	.word	0x08002b39
 80024c4:	08002559 	.word	0x08002559
 80024c8:	54485244 	.word	0x54485244
 80024cc:	200004a8 	.word	0x200004a8
 80024d0:	200004a4 	.word	0x200004a4
 80024d4:	20000534 	.word	0x20000534
 80024d8:	2000000c 	.word	0x2000000c
 80024dc:	200004a0 	.word	0x200004a0

080024e0 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <_tx_thread_initialize+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <_tx_thread_initialize+0x54>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <_tx_thread_initialize+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <_tx_thread_initialize+0x5c>)
 80024f8:	2220      	movs	r2, #32
 80024fa:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	2100      	movs	r1, #0
 8002500:	480f      	ldr	r0, [pc, #60]	; (8002540 <_tx_thread_initialize+0x60>)
 8002502:	f000 fe4f 	bl	80031a4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <_tx_thread_initialize+0x64>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <_tx_thread_initialize+0x68>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <_tx_thread_initialize+0x6c>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <_tx_thread_initialize+0x70>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <_tx_thread_initialize+0x74>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <_tx_thread_initialize+0x74>)
 8002528:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000049c 	.word	0x2000049c
 8002534:	200004a0 	.word	0x200004a0
 8002538:	200004ac 	.word	0x200004ac
 800253c:	200004b0 	.word	0x200004b0
 8002540:	200004b4 	.word	0x200004b4
 8002544:	200004a4 	.word	0x200004a4
 8002548:	200004a8 	.word	0x200004a8
 800254c:	20000534 	.word	0x20000534
 8002550:	20000538 	.word	0x20000538
 8002554:	2000053c 	.word	0x2000053c

08002558 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <_tx_thread_shell_entry+0x8c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <_tx_thread_shell_entry+0x90>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <_tx_thread_shell_entry+0x90>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69f8      	ldr	r0, [r7, #28]
 800257e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002580:	f3ef 8310 	mrs	r3, PRIMASK
 8002584:	607b      	str	r3, [r7, #4]
    return(posture);
 8002586:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002588:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800258a:	b672      	cpsid	i
    return(int_posture);
 800258c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800258e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2201      	movs	r2, #1
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2201      	movs	r2, #1
 800259a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2200      	movs	r2, #0
 80025a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <_tx_thread_shell_entry+0x94>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	4a10      	ldr	r2, [pc, #64]	; (80025ec <_tx_thread_shell_entry+0x94>)
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f383 8810 	msr	PRIMASK, r3
}
 80025b6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80025b8:	f3ef 8314 	mrs	r3, CONTROL
 80025bc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80025be:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f383 8814 	msr	CONTROL, r3
}
 80025d4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80025d6:	69f8      	ldr	r0, [r7, #28]
 80025d8:	f000 f944 	bl	8002864 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80025dc:	bf00      	nop
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000049c 	.word	0x2000049c
 80025e8:	20000538 	.word	0x20000538
 80025ec:	20000534 	.word	0x20000534

080025f0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <_tx_thread_system_preempt_check+0x64>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d121      	bne.n	8002646 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <_tx_thread_system_preempt_check+0x68>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <_tx_thread_system_preempt_check+0x6c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	429a      	cmp	r2, r3
 8002614:	d017      	beq.n	8002646 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <_tx_thread_system_preempt_check+0x70>)
 8002618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800261e:	f3ef 8305 	mrs	r3, IPSR
 8002622:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8002624:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800262a:	f3ef 8310 	mrs	r3, PRIMASK
 800262e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002630:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8002632:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002634:	b662      	cpsie	i
}
 8002636:	bf00      	nop
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f383 8810 	msr	PRIMASK, r3
}
 8002642:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8002644:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000534 	.word	0x20000534
 8002658:	2000049c 	.word	0x2000049c
 800265c:	200004a0 	.word	0x200004a0
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b096      	sub	sp, #88	; 0x58
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800266c:	f3ef 8310 	mrs	r3, PRIMASK
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8002676:	b672      	cpsid	i
    return(int_posture);
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800267a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	334c      	adds	r3, #76	; 0x4c
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fb91 	bl	8002db0 <_tx_timer_system_deactivate>
 800268e:	e002      	b.n	8002696 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <_tx_thread_system_resume+0x1e4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3b01      	subs	r3, #1
 800269c:	4a6a      	ldr	r2, [pc, #424]	; (8002848 <_tx_thread_system_resume+0x1e4>)
 800269e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 8083 	bne.w	80027b0 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8097 	beq.w	80027e2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d172      	bne.n	80027a2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80026c8:	4a60      	ldr	r2, [pc, #384]	; (800284c <_tx_thread_system_resume+0x1e8>)
 80026ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80026d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d154      	bne.n	8002782 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80026d8:	495c      	ldr	r1, [pc, #368]	; (800284c <_tx_thread_system_resume+0x1e8>)
 80026da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80026ee:	2201      	movs	r2, #1
 80026f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80026f8:	4b55      	ldr	r3, [pc, #340]	; (8002850 <_tx_thread_system_resume+0x1ec>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	4313      	orrs	r3, r2
 8002700:	4a53      	ldr	r2, [pc, #332]	; (8002850 <_tx_thread_system_resume+0x1ec>)
 8002702:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <_tx_thread_system_resume+0x1f0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800270a:	429a      	cmp	r2, r3
 800270c:	d269      	bcs.n	80027e2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800270e:	4a51      	ldr	r2, [pc, #324]	; (8002854 <_tx_thread_system_resume+0x1f0>)
 8002710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002712:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <_tx_thread_system_resume+0x1f4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800271a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d103      	bne.n	8002728 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8002720:	4a4d      	ldr	r2, [pc, #308]	; (8002858 <_tx_thread_system_resume+0x1f4>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e05c      	b.n	80027e2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8002728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800272e:	429a      	cmp	r2, r3
 8002730:	d257      	bcs.n	80027e2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8002732:	4a49      	ldr	r2, [pc, #292]	; (8002858 <_tx_thread_system_resume+0x1f4>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800273c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273e:	f383 8810 	msr	PRIMASK, r3
}
 8002742:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002744:	4b40      	ldr	r3, [pc, #256]	; (8002848 <_tx_thread_system_resume+0x1e4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274c:	2b00      	cmp	r3, #0
 800274e:	d174      	bne.n	800283a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002750:	4b42      	ldr	r3, [pc, #264]	; (800285c <_tx_thread_system_resume+0x1f8>)
 8002752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002756:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002758:	f3ef 8305 	mrs	r3, IPSR
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002764:	f3ef 8310 	mrs	r3, PRIMASK
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800276c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800276e:	b662      	cpsie	i
}
 8002770:	bf00      	nop
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f383 8810 	msr	PRIMASK, r3
}
 800277c:	bf00      	nop
}
 800277e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8002780:	e05b      	b.n	800283a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8002782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8002788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279e:	621a      	str	r2, [r3, #32]
 80027a0:	e01f      	b.n	80027e2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
 80027ae:	e018      	b.n	80027e2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d014      	beq.n	80027e2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d010      	beq.n	80027e2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d106      	bne.n	80027d6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
 80027d4:	e005      	b.n	80027e2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2203      	movs	r2, #3
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <_tx_thread_system_resume+0x1fc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f383 8810 	msr	PRIMASK, r3
}
 80027f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <_tx_thread_system_resume+0x1f4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d020      	beq.n	8002840 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <_tx_thread_system_resume+0x1e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8002804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11a      	bne.n	8002840 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <_tx_thread_system_resume+0x1f8>)
 800280c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002810:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002812:	f3ef 8305 	mrs	r3, IPSR
 8002816:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8002818:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800281e:	f3ef 8310 	mrs	r3, PRIMASK
 8002822:	613b      	str	r3, [r7, #16]
    return(posture);
 8002824:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8002826:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002828:	b662      	cpsie	i
}
 800282a:	bf00      	nop
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f383 8810 	msr	PRIMASK, r3
}
 8002836:	bf00      	nop
}
 8002838:	e001      	b.n	800283e <_tx_thread_system_resume+0x1da>
                                return;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <_tx_thread_system_resume+0x1dc>
 800283e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8002840:	3758      	adds	r7, #88	; 0x58
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000534 	.word	0x20000534
 800284c:	200004b4 	.word	0x200004b4
 8002850:	200004ac 	.word	0x200004ac
 8002854:	200004b0 	.word	0x200004b0
 8002858:	200004a0 	.word	0x200004a0
 800285c:	e000ed04 	.word	0xe000ed04
 8002860:	2000049c 	.word	0x2000049c

08002864 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b09e      	sub	sp, #120	; 0x78
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <_tx_thread_system_suspend+0x210>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002872:	f3ef 8310 	mrs	r3, PRIMASK
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8002878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800287a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800287c:	b672      	cpsid	i
    return(int_posture);
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8002880:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002886:	429a      	cmp	r2, r3
 8002888:	d112      	bne.n	80028b0 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8002896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d004      	beq.n	80028a8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	334c      	adds	r3, #76	; 0x4c
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fa22 	bl	8002cec <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	4a72      	ldr	r2, [pc, #456]	; (8002a78 <_tx_thread_system_suspend+0x214>)
 80028ae:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80028b0:	4b72      	ldr	r3, [pc, #456]	; (8002a7c <_tx_thread_system_suspend+0x218>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	4a71      	ldr	r2, [pc, #452]	; (8002a7c <_tx_thread_system_suspend+0x218>)
 80028b8:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 80a6 	bne.w	8002a10 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80028d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d015      	beq.n	800290a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80028e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80028ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028ee:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <_tx_thread_system_suspend+0x21c>)
 80028f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d157      	bne.n	80029ae <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80028fe:	4960      	ldr	r1, [pc, #384]	; (8002a80 <_tx_thread_system_suspend+0x21c>)
 8002900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002902:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002908:	e051      	b.n	80029ae <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800290a:	4a5d      	ldr	r2, [pc, #372]	; (8002a80 <_tx_thread_system_suspend+0x21c>)
 800290c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290e:	2100      	movs	r1, #0
 8002910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8002914:	2201      	movs	r2, #1
 8002916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800291e:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <_tx_thread_system_suspend+0x220>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002924:	43db      	mvns	r3, r3
 8002926:	4013      	ands	r3, r2
 8002928:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <_tx_thread_system_suspend+0x220>)
 800292a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800292c:	2300      	movs	r3, #0
 800292e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8002930:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <_tx_thread_system_suspend+0x220>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8002936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002938:	2b00      	cmp	r3, #0
 800293a:	d12b      	bne.n	8002994 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800293c:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <_tx_thread_system_suspend+0x224>)
 800293e:	2220      	movs	r2, #32
 8002940:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8002942:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <_tx_thread_system_suspend+0x228>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002954:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <_tx_thread_system_suspend+0x218>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800295a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 8081 	bne.w	8002a64 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <_tx_thread_system_suspend+0x22c>)
 8002964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002968:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800296a:	f3ef 8305 	mrs	r3, IPSR
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8002970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002976:	f3ef 8310 	mrs	r3, PRIMASK
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800297c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002980:	b662      	cpsie	i
}
 8002982:	bf00      	nop
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	bf00      	nop
}
 8002990:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8002992:	e067      	b.n	8002a64 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8002994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	65bb      	str	r3, [r7, #88]	; 0x58
 800299c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80029a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a8:	4413      	add	r3, r2
 80029aa:	4a37      	ldr	r2, [pc, #220]	; (8002a88 <_tx_thread_system_suspend+0x224>)
 80029ac:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <_tx_thread_system_suspend+0x228>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d12b      	bne.n	8002a10 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <_tx_thread_system_suspend+0x224>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <_tx_thread_system_suspend+0x21c>)
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	4a32      	ldr	r2, [pc, #200]	; (8002a8c <_tx_thread_system_suspend+0x228>)
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <_tx_thread_system_suspend+0x218>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d144      	bne.n	8002a68 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80029de:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <_tx_thread_system_suspend+0x22c>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80029e6:	f3ef 8305 	mrs	r3, IPSR
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80029fc:	b662      	cpsie	i
}
 80029fe:	bf00      	nop
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f383 8810 	msr	PRIMASK, r3
}
 8002a0a:	bf00      	nop
}
 8002a0c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8002a0e:	e02b      	b.n	8002a68 <_tx_thread_system_suspend+0x204>
 8002a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f383 8810 	msr	PRIMASK, r3
}
 8002a1a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <_tx_thread_system_suspend+0x228>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d022      	beq.n	8002a6c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <_tx_thread_system_suspend+0x218>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11c      	bne.n	8002a6c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <_tx_thread_system_suspend+0x22c>)
 8002a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002a3a:	f3ef 8305 	mrs	r3, IPSR
 8002a3e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8002a40:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10c      	bne.n	8002a60 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a46:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4a:	617b      	str	r3, [r7, #20]
    return(posture);
 8002a4c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8002a4e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002a50:	b662      	cpsie	i
}
 8002a52:	bf00      	nop
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	bf00      	nop
}
 8002a60:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8002a62:	e003      	b.n	8002a6c <_tx_thread_system_suspend+0x208>
                return;
 8002a64:	bf00      	nop
 8002a66:	e002      	b.n	8002a6e <_tx_thread_system_suspend+0x20a>
            return;
 8002a68:	bf00      	nop
 8002a6a:	e000      	b.n	8002a6e <_tx_thread_system_suspend+0x20a>
    return;
 8002a6c:	bf00      	nop
}
 8002a6e:	3778      	adds	r7, #120	; 0x78
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000049c 	.word	0x2000049c
 8002a78:	20000aa0 	.word	0x20000aa0
 8002a7c:	20000534 	.word	0x20000534
 8002a80:	200004b4 	.word	0x200004b4
 8002a84:	200004ac 	.word	0x200004ac
 8002a88:	200004b0 	.word	0x200004b0
 8002a8c:	200004a0 	.word	0x200004a0
 8002a90:	e000ed04 	.word	0xe000ed04

08002a94 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <_tx_thread_time_slice+0x8c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa4:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8002aa8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002aaa:	b672      	cpsid	i
    return(int_posture);
 8002aac:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8002aae:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <_tx_thread_time_slice+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d024      	beq.n	8002b06 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d120      	bne.n	8002b06 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <_tx_thread_time_slice+0x94>)
 8002ad2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d013      	beq.n	8002b06 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d10d      	bne.n	8002b06 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6a12      	ldr	r2, [r2, #32]
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <_tx_thread_time_slice+0x98>)
 8002af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <_tx_thread_time_slice+0x9c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <_tx_thread_time_slice+0x98>)
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <_tx_thread_time_slice+0xa0>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2000049c 	.word	0x2000049c
 8002b24:	20000544 	.word	0x20000544
 8002b28:	20000aa0 	.word	0x20000aa0
 8002b2c:	200004b4 	.word	0x200004b4
 8002b30:	200004b0 	.word	0x200004b0
 8002b34:	200004a0 	.word	0x200004a0

08002b38 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	617b      	str	r3, [r7, #20]
    return(posture);
 8002b4a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8002b4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002b4e:	b672      	cpsid	i
    return(int_posture);
 8002b50:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8002b52:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d10e      	bne.n	8002b7a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <_tx_thread_timeout+0x74>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a12      	ldr	r2, [pc, #72]	; (8002bac <_tx_thread_timeout+0x74>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f383 8810 	msr	PRIMASK, r3
}
 8002b70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8002b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b74:	f7ff fd76 	bl	8002664 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8002b78:	e013      	b.n	8002ba2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f383 8810 	msr	PRIMASK, r3
}
 8002b92:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	69b9      	ldr	r1, [r7, #24]
 8002b9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ba0:	4798      	blx	r3
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000534 	.word	0x20000534

08002bb0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bba:	607b      	str	r3, [r7, #4]
    return(posture);
 8002bbc:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002bbe:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002bc0:	b672      	cpsid	i
    return(int_posture);
 8002bc2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8002bc4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <_tx_timer_expiration_process+0x3c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4a07      	ldr	r2, [pc, #28]	; (8002bec <_tx_timer_expiration_process+0x3c>)
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f383 8810 	msr	PRIMASK, r3
}
 8002bda:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <_tx_timer_expiration_process+0x40>)
 8002bde:	f7ff fd41 	bl	8002664 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000534 	.word	0x20000534
 8002bf0:	200005e4 	.word	0x200005e4

08002bf4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <_tx_timer_initialize+0xa8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <_tx_timer_initialize+0xac>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8002c06:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <_tx_timer_initialize+0xb0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <_tx_timer_initialize+0xb4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <_tx_timer_initialize+0xb8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4824      	ldr	r0, [pc, #144]	; (8002cb0 <_tx_timer_initialize+0xbc>)
 8002c1e:	f000 fac1 	bl	80031a4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <_tx_timer_initialize+0xc0>)
 8002c24:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <_tx_timer_initialize+0xbc>)
 8002c26:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <_tx_timer_initialize+0xc4>)
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <_tx_timer_initialize+0xbc>)
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <_tx_timer_initialize+0xc8>)
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <_tx_timer_initialize+0xcc>)
 8002c32:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <_tx_timer_initialize+0xc8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <_tx_timer_initialize+0xc8>)
 8002c3c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <_tx_timer_initialize+0xd0>)
 8002c40:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <_tx_timer_initialize+0xd4>)
 8002c42:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <_tx_timer_initialize+0xd8>)
 8002c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <_tx_timer_initialize+0xdc>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8002c52:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <_tx_timer_initialize+0xd0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <_tx_timer_initialize+0xd8>)
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	491d      	ldr	r1, [pc, #116]	; (8002cd0 <_tx_timer_initialize+0xdc>)
 8002c5c:	6809      	ldr	r1, [r1, #0]
 8002c5e:	481c      	ldr	r0, [pc, #112]	; (8002cd0 <_tx_timer_initialize+0xdc>)
 8002c60:	6800      	ldr	r0, [r0, #0]
 8002c62:	2400      	movs	r4, #0
 8002c64:	9405      	str	r4, [sp, #20]
 8002c66:	2400      	movs	r4, #0
 8002c68:	9404      	str	r4, [sp, #16]
 8002c6a:	9003      	str	r0, [sp, #12]
 8002c6c:	9102      	str	r1, [sp, #8]
 8002c6e:	9201      	str	r2, [sp, #4]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <_tx_timer_initialize+0xe0>)
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <_tx_timer_initialize+0xe4>)
 8002c76:	4919      	ldr	r1, [pc, #100]	; (8002cdc <_tx_timer_initialize+0xe8>)
 8002c78:	4819      	ldr	r0, [pc, #100]	; (8002ce0 <_tx_timer_initialize+0xec>)
 8002c7a:	f7ff fb3b 	bl	80022f4 <_tx_thread_create>
 8002c7e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e5      	bne.n	8002c52 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <_tx_timer_initialize+0xf0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <_tx_timer_initialize+0xf4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000540 	.word	0x20000540
 8002ca0:	20000aa0 	.word	0x20000aa0
 8002ca4:	20000544 	.word	0x20000544
 8002ca8:	200005d4 	.word	0x200005d4
 8002cac:	200005e0 	.word	0x200005e0
 8002cb0:	20000548 	.word	0x20000548
 8002cb4:	200005c8 	.word	0x200005c8
 8002cb8:	200005d0 	.word	0x200005d0
 8002cbc:	200005cc 	.word	0x200005cc
 8002cc0:	200005c4 	.word	0x200005c4
 8002cc4:	20000694 	.word	0x20000694
 8002cc8:	200006a0 	.word	0x200006a0
 8002ccc:	20000698 	.word	0x20000698
 8002cd0:	2000069c 	.word	0x2000069c
 8002cd4:	4154494d 	.word	0x4154494d
 8002cd8:	08002e21 	.word	0x08002e21
 8002cdc:	080031e0 	.word	0x080031e0
 8002ce0:	200005e4 	.word	0x200005e4
 8002ce4:	200005d8 	.word	0x200005d8
 8002ce8:	200005dc 	.word	0x200005dc

08002cec <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d04a      	beq.n	8002d96 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d06:	d046      	beq.n	8002d96 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d142      	bne.n	8002d96 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d902      	bls.n	8002d1c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8002d16:	231f      	movs	r3, #31
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e002      	b.n	8002d22 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <_tx_timer_system_activate+0xb8>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <_tx_timer_system_activate+0xbc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d30b      	bcc.n	8002d50 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <_tx_timer_system_activate+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	109b      	asrs	r3, r3, #2
 8002d42:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <_tx_timer_system_activate+0xc0>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e011      	b.n	8002d90 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	200005d0 	.word	0x200005d0
 8002da8:	200005cc 	.word	0x200005cc
 8002dac:	200005c8 	.word	0x200005c8

08002db0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d026      	beq.n	8002e12 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d108      	bne.n	8002de4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d117      	bne.n	8002e0c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e013      	b.n	8002e0c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d105      	bne.n	8002e0c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
    }
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b098      	sub	sp, #96	; 0x60
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	; (8002ffc <_tx_timer_thread_entry+0x1dc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	f040 80de 	bne.w	8002ff2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e36:	f3ef 8310 	mrs	r3, PRIMASK
 8002e3a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8002e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e40:	b672      	cpsid	i
    return(int_posture);
 8002e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8002e44:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8002e46:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <_tx_timer_thread_entry+0x1e0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f107 020c 	add.w	r2, r7, #12
 8002e5a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8002e5c:	4b68      	ldr	r3, [pc, #416]	; (8003000 <_tx_timer_thread_entry+0x1e0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <_tx_timer_thread_entry+0x1e0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	4a65      	ldr	r2, [pc, #404]	; (8003000 <_tx_timer_thread_entry+0x1e0>)
 8002e6c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8002e6e:	4b64      	ldr	r3, [pc, #400]	; (8003000 <_tx_timer_thread_entry+0x1e0>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b64      	ldr	r3, [pc, #400]	; (8003004 <_tx_timer_thread_entry+0x1e4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d103      	bne.n	8002e82 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <_tx_timer_thread_entry+0x1e8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a60      	ldr	r2, [pc, #384]	; (8003000 <_tx_timer_thread_entry+0x1e0>)
 8002e80:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8002e82:	4b62      	ldr	r3, [pc, #392]	; (800300c <_tx_timer_thread_entry+0x1ec>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e94:	f3ef 8310 	mrs	r3, PRIMASK
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e9e:	b672      	cpsid	i
    return(int_posture);
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8002ea2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8002ea4:	e07f      	b.n	8002fa6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8002eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d102      	bne.n	8002ec2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e00e      	b.n	8002ee0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ecc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8002ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ed2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed6:	f107 020c 	add.w	r2, r7, #12
 8002eda:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8002edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ede:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d911      	bls.n	8002f0c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8002ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	f107 0208 	add.w	r2, r7, #8
 8002efe:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8002f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f04:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8002f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	e01a      	b.n	8002f42 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8002f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8002f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d009      	beq.n	8002f3c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8002f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2a:	f107 0208 	add.w	r2, r7, #8
 8002f2e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f34:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	e002      	b.n	8002f42 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8002f42:	4a33      	ldr	r2, [pc, #204]	; (8003010 <_tx_timer_thread_entry+0x1f0>)
 8002f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8002f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002f5e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8002f6a:	b672      	cpsid	i
    return(int_posture);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8002f6e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <_tx_timer_thread_entry+0x1f0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d105      	bne.n	8002f8a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8002f84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f86:	f7ff feb1 	bl	8002cec <_tx_timer_system_activate>
 8002f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f383 8810 	msr	PRIMASK, r3
}
 8002f94:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f96:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9a:	623b      	str	r3, [r7, #32]
    return(posture);
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8002f9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002fa0:	b672      	cpsid	i
    return(int_posture);
 8002fa2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8002fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f af7c 	bne.w	8002ea6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <_tx_timer_thread_entry+0x1ec>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <_tx_timer_thread_entry+0x1f4>)
 8002fb8:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <_tx_timer_thread_entry+0x1f8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <_tx_timer_thread_entry+0x1f8>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8002fdc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fde:	f7ff fc41 	bl	8002864 <_tx_thread_system_suspend>
 8002fe2:	e728      	b.n	8002e36 <_tx_timer_thread_entry+0x16>
 8002fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f383 8810 	msr	PRIMASK, r3
}
 8002fee:	bf00      	nop
            TX_DISABLE
 8002ff0:	e721      	b.n	8002e36 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8002ff2:	bf00      	nop
 8002ff4:	3760      	adds	r7, #96	; 0x60
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	4154494d 	.word	0x4154494d
 8003000:	200005d0 	.word	0x200005d0
 8003004:	200005cc 	.word	0x200005cc
 8003008:	200005c8 	.word	0x200005c8
 800300c:	200005d4 	.word	0x200005d4
 8003010:	200005e0 	.word	0x200005e0
 8003014:	200005e4 	.word	0x200005e4
 8003018:	20000534 	.word	0x20000534

0800301c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b092      	sub	sp, #72	; 0x48
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800302a:	2300      	movs	r3, #0
 800302c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003034:	2302      	movs	r3, #2
 8003036:	647b      	str	r3, [r7, #68]	; 0x44
 8003038:	e075      	b.n	8003126 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	2b34      	cmp	r3, #52	; 0x34
 800303e:	d002      	beq.n	8003046 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003040:	2302      	movs	r3, #2
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	e06f      	b.n	8003126 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003050:	b672      	cpsid	i
    return(int_posture);
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003054:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <_txe_byte_pool_create+0x128>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a39      	ldr	r2, [pc, #228]	; (8003144 <_txe_byte_pool_create+0x128>)
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	f383 8810 	msr	PRIMASK, r3
}
 800306a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <_txe_byte_pool_create+0x12c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	643b      	str	r3, [r7, #64]	; 0x40
 8003076:	e009      	b.n	800308c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	429a      	cmp	r2, r3
 800307e:	d00b      	beq.n	8003098 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8003080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	3301      	adds	r3, #1
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <_txe_byte_pool_create+0x130>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003092:	429a      	cmp	r2, r3
 8003094:	d3f0      	bcc.n	8003078 <_txe_byte_pool_create+0x5c>
 8003096:	e000      	b.n	800309a <_txe_byte_pool_create+0x7e>
                break;
 8003098:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	623b      	str	r3, [r7, #32]
    return(posture);
 80030a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80030a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80030a4:	b672      	cpsid	i
    return(int_posture);
 80030a6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80030a8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <_txe_byte_pool_create+0x128>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <_txe_byte_pool_create+0x128>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80030c0:	f7ff fa96 	bl	80025f0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d102      	bne.n	80030d2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80030cc:	2302      	movs	r3, #2
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	e029      	b.n	8003126 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80030d8:	2303      	movs	r3, #3
 80030da:	647b      	str	r3, [r7, #68]	; 0x44
 80030dc:	e023      	b.n	8003126 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b63      	cmp	r3, #99	; 0x63
 80030e2:	d802      	bhi.n	80030ea <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80030e4:	2305      	movs	r3, #5
 80030e6:	647b      	str	r3, [r7, #68]	; 0x44
 80030e8:	e01d      	b.n	8003126 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <_txe_byte_pool_create+0x134>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <_txe_byte_pool_create+0x138>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80030f8:	2313      	movs	r3, #19
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80030fc:	f3ef 8305 	mrs	r3, IPSR
 8003100:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003102:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <_txe_byte_pool_create+0x13c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800310e:	f3ef 8305 	mrs	r3, IPSR
 8003112:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003114:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <_txe_byte_pool_create+0x13c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003120:	d201      	bcs.n	8003126 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003122:	2313      	movs	r3, #19
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7fe ffda 	bl	80020ec <_tx_byte_pool_create>
 8003138:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800313a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800313c:	4618      	mov	r0, r3
 800313e:	3748      	adds	r7, #72	; 0x48
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000534 	.word	0x20000534
 8003148:	2000048c 	.word	0x2000048c
 800314c:	20000490 	.word	0x20000490
 8003150:	2000049c 	.word	0x2000049c
 8003154:	200005e4 	.word	0x200005e4
 8003158:	2000000c 	.word	0x2000000c

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	4d0d      	ldr	r5, [pc, #52]	; (8003194 <__libc_init_array+0x38>)
 8003160:	2600      	movs	r6, #0
 8003162:	4c0d      	ldr	r4, [pc, #52]	; (8003198 <__libc_init_array+0x3c>)
 8003164:	1b64      	subs	r4, r4, r5
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	42a6      	cmp	r6, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	4d0b      	ldr	r5, [pc, #44]	; (800319c <__libc_init_array+0x40>)
 800316e:	2600      	movs	r6, #0
 8003170:	4c0b      	ldr	r4, [pc, #44]	; (80031a0 <__libc_init_array+0x44>)
 8003172:	f000 f81f 	bl	80031b4 <_init>
 8003176:	1b64      	subs	r4, r4, r5
 8003178:	10a4      	asrs	r4, r4, #2
 800317a:	42a6      	cmp	r6, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	f855 3b04 	ldr.w	r3, [r5], #4
 8003184:	3601      	adds	r6, #1
 8003186:	4798      	blx	r3
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	f855 3b04 	ldr.w	r3, [r5], #4
 800318e:	3601      	adds	r6, #1
 8003190:	4798      	blx	r3
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	08003244 	.word	0x08003244
 8003198:	08003244 	.word	0x08003244
 800319c:	08003244 	.word	0x08003244
 80031a0:	08003248 	.word	0x08003248

080031a4 <memset>:
 80031a4:	4402      	add	r2, r0
 80031a6:	4603      	mov	r3, r0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <memset+0xa>
 80031ac:	4770      	bx	lr
 80031ae:	f803 1b01 	strb.w	r1, [r3], #1
 80031b2:	e7f9      	b.n	80031a8 <memset+0x4>

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
