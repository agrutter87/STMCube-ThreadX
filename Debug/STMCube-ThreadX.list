
STMCube-ThreadX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003d6c  08003d6c  00013d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f4c  20000010  08003e40  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000f5c  08003e40  00020f5c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f2f3  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000031eb  00000000  00000000  0002f339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b50  00000000  00000000  00032528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008f8  00000000  00000000  00033078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000338b2  00000000  00000000  00033970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010cfc  00000000  00000000  00067222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001366d1  00000000  00000000  00077f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ae5ef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023f8  00000000  00000000  001ae640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	08003d54 	.word	0x08003d54

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	08003d54 	.word	0x08003d54

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4913      	ldr	r1, [pc, #76]	; (80002e0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	f649 413f 	movw	r1, #39999	; 0x9c3f
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002a0:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a4:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a6:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002aa:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ae:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b2:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b8:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002c0:	f7ff bffe 	b.w	80002c0 <__tx_BadHandler>

080002c4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002cc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ce:	f000 f895 	bl	80003fc <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d6:	4770      	bx	lr

080002d8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_NMIHandler>

080002dc <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002dc:	f7ff bffe 	b.w	80002dc <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002e0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e8:	20000950 	.word	0x20000950
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4824      	ldr	r0, [pc, #144]	; (80003b0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c1e      	ldr	r4, [pc, #120]	; (80003b8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c17      	ldr	r4, [pc, #92]	; (80003b8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b909      	cbnz	r1, 8000396 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 8000394:	e7f9      	b.n	800038a <__tx_ts_wait>

08000396 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000396:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800039a:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039e:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003a4:	e7d8      	b.n	8000358 <__tx_ts_restore>
 80003a6:	bf00      	nop

080003a8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003ac:	200009ec 	.word	0x200009ec
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b0:	20000954 	.word	0x20000954
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b4:	20000958 	.word	0x20000958
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b8:	20000f58 	.word	0x20000f58

080003bc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003bc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003be:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003c2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ca:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003cc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003d0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003d2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003da:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003dc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003de:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003e0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003e2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ee:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003f0:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f8:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr

080003fc <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	4922      	ldr	r1, [pc, #136]	; (8000488 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fe:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000400:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000404:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000408:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800040a:	b13a      	cbz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800040c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000410:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000412:	b91a      	cbnz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000416:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800041a:	6018      	str	r0, [r3, #0]

0800041c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800041c:	491d      	ldr	r1, [pc, #116]	; (8000494 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000420:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000422:	b122      	cbz	r2, 800042e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000426:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800042a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800042c:	e008      	b.n	8000440 <__tx_timer_done>

0800042e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000434:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000436:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000438:	d101      	bne.n	800043e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800043c:	6818      	ldr	r0, [r3, #0]

0800043e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043e:	6008      	str	r0, [r1, #0]

08000440 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000442:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000444:	b912      	cbnz	r2, 800044c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000448:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800044a:	b1c8      	cbz	r0, 8000480 <__tx_timer_nothing_expired>

0800044c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800044c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044e:	4912      	ldr	r1, [pc, #72]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000450:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000452:	b108      	cbz	r0, 8000458 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000454:	f003 f96e 	bl	8003734 <_tx_timer_expiration_process>

08000458 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800045c:	b172      	cbz	r2, 800047c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045e:	f003 f8bd 	bl	80035dc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000464:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000466:	b949      	cbnz	r1, 800047c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800046a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000470:	480f      	ldr	r0, [pc, #60]	; (80004b0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000476:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000478:	d000      	beq.n	800047c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800047a:	6002      	str	r2, [r0, #0]

0800047c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800047c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000480 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000480:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000484:	4770      	bx	lr
 8000486:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000488:	200009f8 	.word	0x200009f8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800048c:	20000f58 	.word	0x20000f58
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000490:	200009fc 	.word	0x200009fc
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000494:	20000a88 	.word	0x20000a88
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	20000a8c 	.word	0x20000a8c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800049c:	20000a84 	.word	0x20000a84
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004a0:	20000a80 	.word	0x20000a80
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a4:	200009ec 	.word	0x200009ec
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a8:	20000954 	.word	0x20000954
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004ac:	20000958 	.word	0x20000958
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b0:	e000ed04 	.word	0xe000ed04

080004b4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004c0:	2334      	movs	r3, #52	; 0x34
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <tx_application_define+0x40>)
 80004ca:	490b      	ldr	r1, [pc, #44]	; (80004f8 <tx_application_define+0x44>)
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <tx_application_define+0x48>)
 80004ce:	f003 fb67 	bl	8003ba0 <_txe_byte_pool_create>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d109      	bne.n	80004ec <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <tx_application_define+0x48>)
 80004da:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004dc:	68b8      	ldr	r0, [r7, #8]
 80004de:	f000 fd2b 	bl	8000f38 <App_ThreadX_Init>
 80004e2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d000      	beq.n	80004ec <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004ea:	e7fe      	b.n	80004ea <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	08003d6c 	.word	0x08003d6c
 80004fc:	2000042c 	.word	0x2000042c

08000500 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <_DoInit+0xa0>)
 8000508:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800050a:	22a8      	movs	r2, #168	; 0xa8
 800050c:	2100      	movs	r1, #0
 800050e:	6838      	ldr	r0, [r7, #0]
 8000510:	f003 fc17 	bl	8003d42 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	2203      	movs	r2, #3
 8000518:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2203      	movs	r2, #3
 800051e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	4a20      	ldr	r2, [pc, #128]	; (80005a4 <_DoInit+0xa4>)
 8000524:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <_DoInit+0xa8>)
 800052a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000532:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2200      	movs	r2, #0
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	4a16      	ldr	r2, [pc, #88]	; (80005a4 <_DoInit+0xa4>)
 800054a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <_DoInit+0xac>)
 8000550:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	2210      	movs	r2, #16
 8000556:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2200      	movs	r2, #0
 8000562:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2200      	movs	r2, #0
 8000568:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800056a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e00c      	b.n	800058e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f1c3 030f 	rsb	r3, r3, #15
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <_DoInit+0xb0>)
 800057c:	5cd1      	ldrb	r1, [r2, r3]
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	460a      	mov	r2, r1
 8000586:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	d9ef      	bls.n	8000574 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000594:	f3bf 8f5f 	dmb	sy
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000460 	.word	0x20000460
 80005a4:	08003d80 	.word	0x08003d80
 80005a8:	20000508 	.word	0x20000508
 80005ac:	20000908 	.word	0x20000908
 80005b0:	08003db4 	.word	0x08003db4

080005b4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80005d0:	69ba      	ldr	r2, [r7, #24]
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d905      	bls.n	80005e4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	3b01      	subs	r3, #1
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
 80005e2:	e007      	b.n	80005f4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	689a      	ldr	r2, [r3, #8]
 80005e8:	69b9      	ldr	r1, [r7, #24]
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	1acb      	subs	r3, r1, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	3b01      	subs	r3, #1
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005fe:	4293      	cmp	r3, r2
 8000600:	bf28      	it	cs
 8000602:	4613      	movcs	r3, r2
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4293      	cmp	r3, r2
 800060c:	bf28      	it	cs
 800060e:	4613      	movcs	r3, r2
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	685a      	ldr	r2, [r3, #4]
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	4413      	add	r3, r2
 800061a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800061c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	6978      	ldr	r0, [r7, #20]
 8000622:	f003 fb81 	bl	8003d28 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000626:	6a3a      	ldr	r2, [r7, #32]
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	4413      	add	r3, r2
 800062c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	4413      	add	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800063e:	69fa      	ldr	r2, [r7, #28]
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	4413      	add	r3, r2
 8000644:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	69fa      	ldr	r2, [r7, #28]
 800064c:	429a      	cmp	r2, r3
 800064e:	d101      	bne.n	8000654 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000654:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1b2      	bne.n	80005ca <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000664:	6a3b      	ldr	r3, [r7, #32]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b088      	sub	sp, #32
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800068a:	69ba      	ldr	r2, [r7, #24]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d911      	bls.n	80006b6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	4413      	add	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	6938      	ldr	r0, [r7, #16]
 80006a2:	f003 fb41 	bl	8003d28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006a6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	441a      	add	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80006b4:	e01f      	b.n	80006f6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	4413      	add	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	68b9      	ldr	r1, [r7, #8]
 80006c8:	6938      	ldr	r0, [r7, #16]
 80006ca:	f003 fb2d 	bl	8003d28 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	4413      	add	r3, r2
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	4619      	mov	r1, r3
 80006e6:	6938      	ldr	r0, [r7, #16]
 80006e8:	f003 fb1e 	bl	8003d28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	60da      	str	r2, [r3, #12]
}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80006fe:	b480      	push	{r7}
 8000700:	b087      	sub	sp, #28
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	429a      	cmp	r2, r3
 8000718:	d808      	bhi.n	800072c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	4413      	add	r3, r2
 8000726:	3b01      	subs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e004      	b.n	8000736 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000736:	697b      	ldr	r3, [r7, #20]
}
 8000738:	4618      	mov	r0, r3
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000762:	4413      	add	r3, r2
 8000764:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d029      	beq.n	80007c2 <SEGGER_RTT_WriteNoLock+0x7e>
 800076e:	2b02      	cmp	r3, #2
 8000770:	d82e      	bhi.n	80007d0 <SEGGER_RTT_WriteNoLock+0x8c>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <SEGGER_RTT_WriteNoLock+0x38>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d013      	beq.n	80007a2 <SEGGER_RTT_WriteNoLock+0x5e>
 800077a:	e029      	b.n	80007d0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800077c:	6978      	ldr	r0, [r7, #20]
 800077e:	f7ff ffbe 	bl	80006fe <_GetAvailWriteSpace>
 8000782:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d202      	bcs.n	8000792 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000790:	e021      	b.n	80007d6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	69b9      	ldr	r1, [r7, #24]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff67 	bl	800066e <_WriteNoCheck>
    break;
 80007a0:	e019      	b.n	80007d6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ffab 	bl	80006fe <_GetAvailWriteSpace>
 80007a8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	4293      	cmp	r3, r2
 80007b0:	bf28      	it	cs
 80007b2:	4613      	movcs	r3, r2
 80007b4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	69b9      	ldr	r1, [r7, #24]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff57 	bl	800066e <_WriteNoCheck>
    break;
 80007c0:	e009      	b.n	80007d6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	69b9      	ldr	r1, [r7, #24]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff fef4 	bl	80005b4 <_WriteBlocking>
 80007cc:	61f8      	str	r0, [r7, #28]
    break;
 80007ce:	e002      	b.n	80007d6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
    break;
 80007d4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80007d6:	69fb      	ldr	r3, [r7, #28]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000460 	.word	0x20000460

080007e4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <SEGGER_RTT_Write+0x48>)
 80007f2:	61fb      	str	r3, [r7, #28]
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b53      	cmp	r3, #83	; 0x53
 80007fc:	d001      	beq.n	8000802 <SEGGER_RTT_Write+0x1e>
 80007fe:	f7ff fe7f 	bl	8000500 <_DoInit>
  SEGGER_RTT_LOCK();
 8000802:	f3ef 8311 	mrs	r3, BASEPRI
 8000806:	f04f 0120 	mov.w	r1, #32
 800080a:	f381 8811 	msr	BASEPRI, r1
 800080e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff ff95 	bl	8000744 <SEGGER_RTT_WriteNoLock>
 800081a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8000822:	697b      	ldr	r3, [r7, #20]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000460 	.word	0x20000460

08000830 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  _DoInit();
 8000834:	f7ff fe64 	bl	8000500 <_DoInit>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d80e      	bhi.n	8000878 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	78fa      	ldrb	r2, [r7, #3]
 8000864:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	d115      	bne.n	80008b0 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6918      	ldr	r0, [r3, #16]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6819      	ldr	r1, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	461a      	mov	r2, r3
 8000892:	f7ff ffa7 	bl	80007e4 <SEGGER_RTT_Write>
 8000896:	4602      	mov	r2, r0
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	429a      	cmp	r2, r3
 800089e:	d004      	beq.n	80008aa <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f04f 32ff 	mov.w	r2, #4294967295
 80008a6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80008a8:	e002      	b.n	80008b0 <_StoreChar+0x74>
      p->Cnt = 0u;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80008ca:	2301      	movs	r3, #1
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80008d2:	e007      	b.n	80008e4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80008d4:	6a3a      	ldr	r2, [r7, #32]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008dc:	623b      	str	r3, [r7, #32]
    Width++;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3301      	adds	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80008e4:	6a3a      	ldr	r2, [r7, #32]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d2f3      	bcs.n	80008d4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d901      	bls.n	80008f8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80008f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d125      	bne.n	800094e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000904:	2b00      	cmp	r3, #0
 8000906:	d022      	beq.n	800094e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <_PrintUnsigned+0x66>
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_PrintUnsigned+0x66>
        c = '0';
 8000918:	2330      	movs	r3, #48	; 0x30
 800091a:	76fb      	strb	r3, [r7, #27]
 800091c:	e001      	b.n	8000922 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800091e:	2320      	movs	r3, #32
 8000920:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000922:	e00b      	b.n	800093c <_PrintUnsigned+0x84>
        FieldWidth--;
 8000924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000926:	3b01      	subs	r3, #1
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800092a:	7efb      	ldrb	r3, [r7, #27]
 800092c:	4619      	mov	r1, r3
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff ff84 	bl	800083c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db07      	blt.n	800094c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800093e:	2b00      	cmp	r3, #0
 8000940:	d005      	beq.n	800094e <_PrintUnsigned+0x96>
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000946:	429a      	cmp	r2, r3
 8000948:	d3ec      	bcc.n	8000924 <_PrintUnsigned+0x6c>
 800094a:	e000      	b.n	800094e <_PrintUnsigned+0x96>
          break;
 800094c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db55      	blt.n	8000a02 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d903      	bls.n	8000964 <_PrintUnsigned+0xac>
        NumDigits--;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	e009      	b.n	8000978 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	fbb2 f3f3 	udiv	r3, r2, r3
 800096c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	d200      	bcs.n	8000978 <_PrintUnsigned+0xc0>
          break;
 8000976:	e005      	b.n	8000984 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000982:	e7e8      	b.n	8000956 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	fbb2 f3f3 	udiv	r3, r2, r3
 800098c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <_PrintUnsigned+0x154>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f7ff ff48 	bl	800083c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db08      	blt.n	80009c6 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80009b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1df      	bne.n	8000984 <_PrintUnsigned+0xcc>
 80009c4:	e000      	b.n	80009c8 <_PrintUnsigned+0x110>
        break;
 80009c6:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80009c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d017      	beq.n	8000a02 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80009d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d014      	beq.n	8000a02 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009d8:	e00a      	b.n	80009f0 <_PrintUnsigned+0x138>
          FieldWidth--;
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	3b01      	subs	r3, #1
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80009e0:	2120      	movs	r1, #32
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ff2a 	bl	800083c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db07      	blt.n	8000a00 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80009f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d005      	beq.n	8000a02 <_PrintUnsigned+0x14a>
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3ed      	bcc.n	80009da <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80009fe:	e000      	b.n	8000a02 <_PrintUnsigned+0x14a>
            break;
 8000a00:	bf00      	nop
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08003dc8 	.word	0x08003dc8

08000a10 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bfb8      	it	lt
 8000a24:	425b      	neglt	r3, r3
 8000a26:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a2c:	e007      	b.n	8000a3e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a36:	613b      	str	r3, [r7, #16]
    Width++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	daf3      	bge.n	8000a2e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d901      	bls.n	8000a52 <_PrintInt+0x42>
    Width = NumDigits;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00a      	beq.n	8000a6e <_PrintInt+0x5e>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db04      	blt.n	8000a68 <_PrintInt+0x58>
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <_PrintInt+0x5e>
    FieldWidth--;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d002      	beq.n	8000a7e <_PrintInt+0x6e>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d01c      	beq.n	8000ab8 <_PrintInt+0xa8>
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d117      	bne.n	8000ab8 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d014      	beq.n	8000ab8 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a8e:	e00a      	b.n	8000aa6 <_PrintInt+0x96>
        FieldWidth--;
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000a96:	2120      	movs	r1, #32
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fecf 	bl	800083c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db07      	blt.n	8000ab6 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d005      	beq.n	8000ab8 <_PrintInt+0xa8>
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3ed      	bcc.n	8000a90 <_PrintInt+0x80>
 8000ab4:	e000      	b.n	8000ab8 <_PrintInt+0xa8>
          break;
 8000ab6:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db4a      	blt.n	8000b56 <_PrintInt+0x146>
    if (v < 0) {
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da07      	bge.n	8000ad6 <_PrintInt+0xc6>
      v = -v;
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	425b      	negs	r3, r3
 8000aca:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000acc:	212d      	movs	r1, #45	; 0x2d
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff feb4 	bl	800083c <_StoreChar>
 8000ad4:	e008      	b.n	8000ae8 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000ae0:	212b      	movs	r1, #43	; 0x2b
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff feaa 	bl	800083c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db32      	blt.n	8000b56 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01f      	beq.n	8000b3a <_PrintInt+0x12a>
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11a      	bne.n	8000b3a <_PrintInt+0x12a>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d117      	bne.n	8000b3a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d014      	beq.n	8000b3a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b10:	e00a      	b.n	8000b28 <_PrintInt+0x118>
            FieldWidth--;
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000b18:	2130      	movs	r1, #48	; 0x30
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fe8e 	bl	800083c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db07      	blt.n	8000b38 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <_PrintInt+0x12a>
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d3ed      	bcc.n	8000b12 <_PrintInt+0x102>
 8000b36:	e000      	b.n	8000b3a <_PrintInt+0x12a>
              break;
 8000b38:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db09      	blt.n	8000b56 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff feb1 	bl	80008b8 <_PrintUnsigned>
      }
    }
  }
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0a2      	sub	sp, #136	; 0x88
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000b90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 819f 	beq.w	8000ed8 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8000b9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000b9e:	2b25      	cmp	r3, #37	; 0x25
 8000ba0:	f040 818d 	bne.w	8000ebe <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 8000bb4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000bb8:	3b23      	subs	r3, #35	; 0x23
 8000bba:	2b0d      	cmp	r3, #13
 8000bbc:	d83e      	bhi.n	8000c3c <SEGGER_RTT_vprintf+0xdc>
 8000bbe:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <SEGGER_RTT_vprintf+0x64>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000c2d 	.word	0x08000c2d
 8000bc8:	08000c3d 	.word	0x08000c3d
 8000bcc:	08000c3d 	.word	0x08000c3d
 8000bd0:	08000c3d 	.word	0x08000c3d
 8000bd4:	08000c3d 	.word	0x08000c3d
 8000bd8:	08000c3d 	.word	0x08000c3d
 8000bdc:	08000c3d 	.word	0x08000c3d
 8000be0:	08000c3d 	.word	0x08000c3d
 8000be4:	08000c1d 	.word	0x08000c1d
 8000be8:	08000c3d 	.word	0x08000c3d
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c3d 	.word	0x08000c3d
 8000bf4:	08000c3d 	.word	0x08000c3d
 8000bf8:	08000c0d 	.word	0x08000c0d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	673b      	str	r3, [r7, #112]	; 0x70
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	e01a      	b.n	8000c42 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	673b      	str	r3, [r7, #112]	; 0x70
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	e012      	b.n	8000c42 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	673b      	str	r3, [r7, #112]	; 0x70
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	e00a      	b.n	8000c42 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	673b      	str	r3, [r7, #112]	; 0x70
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	e002      	b.n	8000c42 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000c40:	bf00      	nop
        }
      } while (v);
 8000c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1b1      	bne.n	8000bac <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8000c54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c58:	2b2f      	cmp	r3, #47	; 0x2f
 8000c5a:	d912      	bls.n	8000c82 <SEGGER_RTT_vprintf+0x122>
 8000c5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c60:	2b39      	cmp	r3, #57	; 0x39
 8000c62:	d80e      	bhi.n	8000c82 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000c6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	461a      	mov	r2, r3
 8000c76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3b30      	subs	r3, #48	; 0x30
 8000c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8000c80:	e7e4      	b.n	8000c4c <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000c82:	2300      	movs	r3, #0
 8000c84:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8000c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000c92:	2b2e      	cmp	r3, #46	; 0x2e
 8000c94:	d11d      	bne.n	8000cd2 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 8000ca4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8000caa:	d912      	bls.n	8000cd2 <SEGGER_RTT_vprintf+0x172>
 8000cac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cb0:	2b39      	cmp	r3, #57	; 0x39
 8000cb2:	d80e      	bhi.n	8000cd2 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8000cba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cca:	4413      	add	r3, r2
 8000ccc:	3b30      	subs	r3, #48	; 0x30
 8000cce:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8000cd0:	e7e4      	b.n	8000c9c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8000cda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cde:	2b6c      	cmp	r3, #108	; 0x6c
 8000ce0:	d003      	beq.n	8000cea <SEGGER_RTT_vprintf+0x18a>
 8000ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000ce6:	2b68      	cmp	r3, #104	; 0x68
 8000ce8:	d107      	bne.n	8000cfa <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8000cf8:	e7ef      	b.n	8000cda <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000cfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cfe:	2b25      	cmp	r3, #37	; 0x25
 8000d00:	f000 80d1 	beq.w	8000ea6 <SEGGER_RTT_vprintf+0x346>
 8000d04:	2b25      	cmp	r3, #37	; 0x25
 8000d06:	f2c0 80d5 	blt.w	8000eb4 <SEGGER_RTT_vprintf+0x354>
 8000d0a:	2b78      	cmp	r3, #120	; 0x78
 8000d0c:	f300 80d2 	bgt.w	8000eb4 <SEGGER_RTT_vprintf+0x354>
 8000d10:	2b58      	cmp	r3, #88	; 0x58
 8000d12:	f2c0 80cf 	blt.w	8000eb4 <SEGGER_RTT_vprintf+0x354>
 8000d16:	3b58      	subs	r3, #88	; 0x58
 8000d18:	2b20      	cmp	r3, #32
 8000d1a:	f200 80cb 	bhi.w	8000eb4 <SEGGER_RTT_vprintf+0x354>
 8000d1e:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <SEGGER_RTT_vprintf+0x1c4>)
 8000d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d24:	08000e1b 	.word	0x08000e1b
 8000d28:	08000eb5 	.word	0x08000eb5
 8000d2c:	08000eb5 	.word	0x08000eb5
 8000d30:	08000eb5 	.word	0x08000eb5
 8000d34:	08000eb5 	.word	0x08000eb5
 8000d38:	08000eb5 	.word	0x08000eb5
 8000d3c:	08000eb5 	.word	0x08000eb5
 8000d40:	08000eb5 	.word	0x08000eb5
 8000d44:	08000eb5 	.word	0x08000eb5
 8000d48:	08000eb5 	.word	0x08000eb5
 8000d4c:	08000eb5 	.word	0x08000eb5
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000dcf 	.word	0x08000dcf
 8000d58:	08000eb5 	.word	0x08000eb5
 8000d5c:	08000eb5 	.word	0x08000eb5
 8000d60:	08000eb5 	.word	0x08000eb5
 8000d64:	08000eb5 	.word	0x08000eb5
 8000d68:	08000eb5 	.word	0x08000eb5
 8000d6c:	08000eb5 	.word	0x08000eb5
 8000d70:	08000eb5 	.word	0x08000eb5
 8000d74:	08000eb5 	.word	0x08000eb5
 8000d78:	08000eb5 	.word	0x08000eb5
 8000d7c:	08000eb5 	.word	0x08000eb5
 8000d80:	08000eb5 	.word	0x08000eb5
 8000d84:	08000e81 	.word	0x08000e81
 8000d88:	08000eb5 	.word	0x08000eb5
 8000d8c:	08000eb5 	.word	0x08000eb5
 8000d90:	08000e41 	.word	0x08000e41
 8000d94:	08000eb5 	.word	0x08000eb5
 8000d98:	08000df5 	.word	0x08000df5
 8000d9c:	08000eb5 	.word	0x08000eb5
 8000da0:	08000eb5 	.word	0x08000eb5
 8000da4:	08000e1b 	.word	0x08000e1b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	1d19      	adds	r1, r3, #4
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6011      	str	r1, [r2, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8000db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8000dbc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fd38 	bl	800083c <_StoreChar>
        break;
 8000dcc:	e073      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	1d19      	adds	r1, r3, #4
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6011      	str	r1, [r2, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000ddc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dea:	220a      	movs	r2, #10
 8000dec:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000dee:	f7ff fe0f 	bl	8000a10 <_PrintInt>
        break;
 8000df2:	e060      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	1d19      	adds	r1, r3, #4
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6011      	str	r1, [r2, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000e02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e04:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e12:	220a      	movs	r2, #10
 8000e14:	f7ff fd50 	bl	80008b8 <_PrintUnsigned>
        break;
 8000e18:	e04d      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1d19      	adds	r1, r3, #4
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6011      	str	r1, [r2, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000e28:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e2a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e38:	2210      	movs	r2, #16
 8000e3a:	f7ff fd3d 	bl	80008b8 <_PrintUnsigned>
        break;
 8000e3e:	e03a      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1d19      	adds	r1, r3, #4
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6011      	str	r1, [r2, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 8000e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 8000e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e58:	3301      	adds	r3, #1
 8000e5a:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 8000e5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00b      	beq.n	8000e7c <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000e64:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000e68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fce4 	bl	800083c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dae9      	bge.n	8000e4e <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000e7a:	e01c      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
              break;
 8000e7c:	bf00      	nop
        break;
 8000e7e:	e01a      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1d19      	adds	r1, r3, #4
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6011      	str	r1, [r2, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000e8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000e90:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000e94:	2300      	movs	r3, #0
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	2308      	movs	r3, #8
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	2210      	movs	r2, #16
 8000ea0:	f7ff fd0a 	bl	80008b8 <_PrintUnsigned>
        break;
 8000ea4:	e007      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000ea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eaa:	2125      	movs	r1, #37	; 0x25
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fcc5 	bl	800083c <_StoreChar>
        break;
 8000eb2:	e000      	b.n	8000eb6 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000eb4:	bf00      	nop
      }
      sFormat++;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	e007      	b.n	8000ece <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000ebe:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000ec2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fcb7 	bl	800083c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f6bf ae56 	bge.w	8000b82 <SEGGER_RTT_vprintf+0x22>
 8000ed6:	e000      	b.n	8000eda <SEGGER_RTT_vprintf+0x37a>
      break;
 8000ed8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dd0d      	ble.n	8000efc <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff fc78 	bl	80007e4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ef6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ef8:	4413      	add	r3, r2
 8000efa:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8000efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3780      	adds	r7, #128	; 0x80
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop

08000f08 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000f08:	b40e      	push	{r1, r2, r3}
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	69f9      	ldr	r1, [r7, #28]
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fe1d 	bl	8000b60 <SEGGER_RTT_vprintf>
 8000f26:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b003      	add	sp, #12
 8000f36:	4770      	bx	lr

08000f38 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  SEGGER_RTT_Init();
 8000f44:	f7ff fc74 	bl	8000830 <SEGGER_RTT_Init>

  while(1)
  {
	  SEGGER_RTT_printf(0, "Running, ticks = %d", tx_time_get());
 8000f48:	f002 fbd6 	bl	80036f8 <_tx_time_get>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4903      	ldr	r1, [pc, #12]	; (8000f60 <App_ThreadX_Init+0x28>)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ffd8 	bl	8000f08 <SEGGER_RTT_printf>
	  tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f002 f86d 	bl	8003038 <_tx_thread_sleep>
	  SEGGER_RTT_printf(0, "Running, ticks = %d", tx_time_get());
 8000f5e:	e7f3      	b.n	8000f48 <App_ThreadX_Init+0x10>
 8000f60:	08003d8c 	.word	0x08003d8c

08000f64 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000f68:	f001 febe 	bl	8002ce8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 f908 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f807 	bl	8000f8a <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000f7c:	f000 f84e 	bl	800101c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ICACHE_Init();
 8000f80:	f000 f858 	bl	8001034 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000f84:	f7ff ffee 	bl	8000f64 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x18>

08000f8a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b09e      	sub	sp, #120	; 0x78
 8000f8e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2260      	movs	r2, #96	; 0x60
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fed2 	bl	8003d42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 fa6e 	bl	8001490 <HAL_PWREx_ControlVoltageScaling>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fba:	f000 f84e 	bl	800105a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fb35 	bl	8001648 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000fe4:	f000 f839 	bl	800105a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	231f      	movs	r3, #31
 8000fea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f9fb 	bl	8002400 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001010:	f000 f823 	bl	800105a <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3778      	adds	r7, #120	; 0x78
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001020:	2002      	movs	r0, #2
 8001022:	f000 fac1 	bl	80015a8 <HAL_PWREx_ConfigSupply>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemPower_Config+0x14>
  {
    Error_Handler();
 800102c:	f000 f815 	bl	800105a <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f9f9 	bl	8001430 <HAL_ICACHE_ConfigAssociativityMode>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001044:	f000 f809 	bl	800105a <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001048:	f000 fa12 	bl	8001470 <HAL_ICACHE_Enable>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001052:	f000 f802 	bl	800105a <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105e:	b672      	cpsid	i
}
 8001060:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001062:	e7fe      	b.n	8001062 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_MspInit+0x30>)
 800106c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001070:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x30>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x30>)
 800107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	46020c00 	.word	0x46020c00

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <SystemInit+0x68>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <SystemInit+0x68>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <SystemInit+0x6c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <SystemInit+0x6c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SystemInit+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <SystemInit+0x6c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <SystemInit+0x6c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <SystemInit+0x6c>)
 80010f6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010fa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <SystemInit+0x6c>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <SystemInit+0x6c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <SystemInit+0x6c>)
 800110c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <SystemInit+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <SystemInit+0x68>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	46020c00 	.word	0x46020c00

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001138:	f7ff ffc4 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800113c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800113e:	e003      	b.n	8001148 <LoopCopyDataInit>

08001140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001146:	3104      	adds	r1, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800114c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800114e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001150:	d3f6      	bcc.n	8001140 <CopyDataInit>
	ldr	r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001154:	e002      	b.n	800115c <LoopFillZerobss>

08001156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <LoopForever+0x16>)
	cmp	r2, r3
 800115e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001160:	d3f9      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 fdbd 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff ff03 	bl	8000f70 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800116c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001170:	08003e30 	.word	0x08003e30
	ldr	r0, =_sdata
 8001174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001178:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800117c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001180:	20000f5c 	.word	0x20000f5c

08001184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_IRQHandler>
	...

08001188 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_Init+0x4c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_Init+0x4c>)
 8001192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f917 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800119e:	f001 fb21 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_Init+0x50>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	490b      	ldr	r1, [pc, #44]	; (80011dc <HAL_Init+0x54>)
 80011ae:	5ccb      	ldrb	r3, [r1, r3]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_Init+0x58>)
 80011b6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f813 	bl	80011e4 <HAL_InitTick>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e002      	b.n	80011ce <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff ff4c 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000
 80011d8:	46020c00 	.word	0x46020c00
 80011dc:	08003dd8 	.word	0x08003dd8
 80011e0:	20000000 	.word	0x20000000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_InitTick+0x60>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e021      	b.n	800123c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_InitTick+0x64>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f901 	bl	8001416 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f8d9 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x68>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000918 	.word	0x20000918

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff47 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff5e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff90 	bl	8001320 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffb2 	bl	8001388 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e007      	b.n	800145e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 0204 	bic.w	r2, r3, #4
 8001456:	4905      	ldr	r1, [pc, #20]	; (800146c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40030400 	.word	0x40030400

08001470 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_ICACHE_Enable+0x1c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_ICACHE_Enable+0x1c>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40030400 	.word	0x40030400

08001490 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d10b      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d905      	bls.n	80014be <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4a32      	ldr	r2, [pc, #200]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e057      	b.n	8001572 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d90a      	bls.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80014ca:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	60d3      	str	r3, [r2, #12]
 80014de:	e007      	b.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80014e8:	4925      	ldr	r1, [pc, #148]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	099b      	lsrs	r3, r3, #6
 80014fc:	2232      	movs	r2, #50	; 0x32
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800150e:	e002      	b.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3b01      	subs	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f3      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01b      	beq.n	8001566 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	2232      	movs	r2, #50	; 0x32
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	4a11      	ldr	r2, [pc, #68]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800154c:	e002      	b.n	8001554 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3b01      	subs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f3      	bne.n	800154e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e000      	b.n	8001572 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	46020800 	.word	0x46020800
 8001584:	20000000 	.word	0x20000000
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	46020800 	.word	0x46020800

080015a8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_PWREx_ConfigSupply+0x94>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_PWREx_ConfigSupply+0x98>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	099b      	lsrs	r3, r3, #6
 80015bc:	2232      	movs	r2, #50	; 0x32
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_PWREx_ConfigSupply+0x98>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d113      	bne.n	80015fc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_PWREx_ConfigSupply+0x9c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_PWREx_ConfigSupply+0x9c>)
 80015da:	f023 0302 	bic.w	r3, r3, #2
 80015de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80015e0:	e002      	b.n	80015e8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_PWREx_ConfigSupply+0x9c>)
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d116      	bne.n	8001622 <HAL_PWREx_ConfigSupply+0x7a>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f3      	bne.n	80015e2 <HAL_PWREx_ConfigSupply+0x3a>
 80015fa:	e012      	b.n	8001622 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_PWREx_ConfigSupply+0x9c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_PWREx_ConfigSupply+0x9c>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001608:	e002      	b.n	8001610 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3b01      	subs	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_PWREx_ConfigSupply+0x9c>)
 8001612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <HAL_PWREx_ConfigSupply+0x7a>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f3      	bne.n	800160a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e000      	b.n	800162e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000
 8001640:	10624dd3 	.word	0x10624dd3
 8001644:	46020800 	.word	0x46020800

08001648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	f000 bec8 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001662:	4b99      	ldr	r3, [pc, #612]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166c:	4b96      	ldr	r3, [pc, #600]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 816c 	beq.w	800195c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_RCC_OscConfig+0x52>
 800168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168c:	2b0c      	cmp	r3, #12
 800168e:	f040 80de 	bne.w	800184e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	2b01      	cmp	r3, #1
 8001696:	f040 80da 	bne.w	800184e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f000 bea5 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_RCC_OscConfig+0x7a>
 80016b8:	4b83      	ldr	r3, [pc, #524]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016c0:	e005      	b.n	80016ce <HAL_RCC_OscConfig+0x86>
 80016c2:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80016c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d255      	bcs.n	800177e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10a      	bne.n	80016ee <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 f9a3 	bl	8002a28 <RCC_SetFlashLatencyFromMSIRange>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f000 be82 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016ee:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	4a75      	ldr	r2, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80016f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f8:	6093      	str	r3, [r2, #8]
 80016fa:	4b73      	ldr	r3, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	4970      	ldr	r1, [pc, #448]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001714:	d309      	bcc.n	800172a <HAL_RCC_OscConfig+0xe2>
 8001716:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f023 021f 	bic.w	r2, r3, #31
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4969      	ldr	r1, [pc, #420]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001724:	4313      	orrs	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
 8001728:	e07e      	b.n	8001828 <HAL_RCC_OscConfig+0x1e0>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	2b00      	cmp	r3, #0
 8001730:	da0a      	bge.n	8001748 <HAL_RCC_OscConfig+0x100>
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	4961      	ldr	r1, [pc, #388]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001742:	4313      	orrs	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
 8001746:	e06f      	b.n	8001828 <HAL_RCC_OscConfig+0x1e0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d30a      	bcc.n	8001768 <HAL_RCC_OscConfig+0x120>
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	029b      	lsls	r3, r3, #10
 8001760:	4959      	ldr	r1, [pc, #356]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
 8001766:	e05f      	b.n	8001828 <HAL_RCC_OscConfig+0x1e0>
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	03db      	lsls	r3, r3, #15
 8001776:	4954      	ldr	r1, [pc, #336]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e054      	b.n	8001828 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001788:	6093      	str	r3, [r2, #8]
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	494c      	ldr	r1, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017a4:	d309      	bcc.n	80017ba <HAL_RCC_OscConfig+0x172>
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f023 021f 	bic.w	r2, r3, #31
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4945      	ldr	r1, [pc, #276]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e028      	b.n	800180c <HAL_RCC_OscConfig+0x1c4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da0a      	bge.n	80017d8 <HAL_RCC_OscConfig+0x190>
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	015b      	lsls	r3, r3, #5
 80017d0:	493d      	ldr	r1, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
 80017d6:	e019      	b.n	800180c <HAL_RCC_OscConfig+0x1c4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e0:	d30a      	bcc.n	80017f8 <HAL_RCC_OscConfig+0x1b0>
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60cb      	str	r3, [r1, #12]
 80017f6:	e009      	b.n	800180c <HAL_RCC_OscConfig+0x1c4>
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	03db      	lsls	r3, r3, #15
 8001806:	4930      	ldr	r1, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001808:	4313      	orrs	r3, r2
 800180a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	4618      	mov	r0, r3
 8001818:	f001 f906 	bl	8002a28 <RCC_SetFlashLatencyFromMSIRange>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	f000 bde5 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001828:	f001 f8e4 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x284>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fcd7 	bl	80011e4 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800183c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808a 	beq.w	800195a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800184a:	f000 bdd2 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d066      	beq.n	8001924 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001862:	f7ff fcf5 	bl	8001250 <HAL_GetTick>
 8001866:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001868:	e009      	b.n	800187e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186a:	f7ff fcf1 	bl	8001250 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d902      	bls.n	800187e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	f000 bdba 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0ef      	beq.n	800186a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001894:	6093      	str	r3, [r2, #8]
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	4909      	ldr	r1, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80018b0:	d30e      	bcc.n	80018d0 <HAL_RCC_OscConfig+0x288>
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f023 021f 	bic.w	r2, r3, #31
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4902      	ldr	r1, [pc, #8]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e04a      	b.n	800195c <HAL_RCC_OscConfig+0x314>
 80018c6:	bf00      	nop
 80018c8:	46020c00 	.word	0x46020c00
 80018cc:	20000004 	.word	0x20000004
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da0a      	bge.n	80018ee <HAL_RCC_OscConfig+0x2a6>
 80018d8:	4b98      	ldr	r3, [pc, #608]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	015b      	lsls	r3, r3, #5
 80018e6:	4995      	ldr	r1, [pc, #596]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
 80018ec:	e036      	b.n	800195c <HAL_RCC_OscConfig+0x314>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f6:	d30a      	bcc.n	800190e <HAL_RCC_OscConfig+0x2c6>
 80018f8:	4b90      	ldr	r3, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	498d      	ldr	r1, [pc, #564]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e026      	b.n	800195c <HAL_RCC_OscConfig+0x314>
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	03db      	lsls	r3, r3, #15
 800191c:	4987      	ldr	r1, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
 8001922:	e01b      	b.n	800195c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001924:	4b85      	ldr	r3, [pc, #532]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a84      	ldr	r2, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001930:	f7ff fc8e 	bl	8001250 <HAL_GetTick>
 8001934:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001936:	e009      	b.n	800194c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001938:	f7ff fc8a 	bl	8001250 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d902      	bls.n	800194c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	f000 bd53 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800194c:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ef      	bne.n	8001938 <HAL_RCC_OscConfig+0x2f0>
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800195a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 808b 	beq.w	8001a80 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800196a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196c:	2b08      	cmp	r3, #8
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x334>
 8001970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d109      	bne.n	800198a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	2b03      	cmp	r3, #3
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d17d      	bne.n	8001a80 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	f000 bd34 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x35a>
 8001994:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a68      	ldr	r2, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e041      	b.n	8001a26 <HAL_RCC_OscConfig+0x3de>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019aa:	d112      	bne.n	80019d2 <HAL_RCC_OscConfig+0x38a>
 80019ac:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a62      	ldr	r2, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a5c      	ldr	r2, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e029      	b.n	8001a26 <HAL_RCC_OscConfig+0x3de>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3ba>
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a56      	ldr	r2, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a53      	ldr	r2, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e011      	b.n	8001a26 <HAL_RCC_OscConfig+0x3de>
 8001a02:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4d      	ldr	r2, [pc, #308]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a4a      	ldr	r2, [pc, #296]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a47      	ldr	r2, [pc, #284]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d014      	beq.n	8001a58 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fc0f 	bl	8001250 <HAL_GetTick>
 8001a32:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a36:	f7ff fc0b 	bl	8001250 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	; 0x64
 8001a42:	d902      	bls.n	8001a4a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f000 bcd4 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	4b3c      	ldr	r3, [pc, #240]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0ef      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3ee>
 8001a56:	e013      	b.n	8001a80 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbfa 	bl	8001250 <HAL_GetTick>
 8001a5c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fbf6 	bl	8001250 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d902      	bls.n	8001a74 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f000 bcbf 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ef      	bne.n	8001a60 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05f      	beq.n	8001b4c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x456>
 8001a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d114      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d111      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f000 bca3 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	4920      	ldr	r1, [pc, #128]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ac0:	e044      	b.n	8001b4c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d024      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ad6:	f7ff fbbb 	bl	8001250 <HAL_GetTick>
 8001ada:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff fbb7 	bl	8001250 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d902      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	f000 bc80 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ef      	beq.n	8001ade <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	490b      	ldr	r1, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	610b      	str	r3, [r1, #16]
 8001b12:	e01b      	b.n	8001b4c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b20:	f7ff fb96 	bl	8001250 <HAL_GetTick>
 8001b24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fb92 	bl	8001250 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d904      	bls.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	f000 bc5b 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
 8001b3c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	4baf      	ldr	r3, [pc, #700]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1ed      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80c8 	beq.w	8001cea <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b60:	4ba7      	ldr	r3, [pc, #668]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d111      	bne.n	8001b92 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4ba4      	ldr	r3, [pc, #656]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b74:	4aa2      	ldr	r2, [pc, #648]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b92:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001b9e:	4b99      	ldr	r3, [pc, #612]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	4a98      	ldr	r2, [pc, #608]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fb51 	bl	8001250 <HAL_GetTick>
 8001bae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001bb0:	e009      	b.n	8001bc6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff fb4d 	bl	8001250 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d902      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f000 bc16 	b.w	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001bc6:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ef      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d05f      	beq.n	8001c9a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d037      	beq.n	8001c60 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e3f4      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c12:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c18:	4a79      	ldr	r2, [pc, #484]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c1a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001c22:	f7ff fb15 	bl	8001250 <HAL_GetTick>
 8001c26:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fb11 	bl	8001250 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e3da      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c3c:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ef      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4969      	ldr	r1, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c66:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001c70:	f7ff faee 	bl	8001250 <HAL_GetTick>
 8001c74:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff faea 	bl	8001250 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e3b3      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ef      	beq.n	8001c78 <HAL_RCC_OscConfig+0x630>
 8001c98:	e01b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca0:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001ca2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001caa:	f7ff fad1 	bl	8001250 <HAL_GetTick>
 8001cae:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff facd 	bl	8001250 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e396      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cc4:	4b4e      	ldr	r3, [pc, #312]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ef      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8111 	beq.w	8001f1a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	4a3b      	ldr	r2, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d1c:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d118      	bne.n	8001d6e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d48:	f7ff fa82 	bl	8001250 <HAL_GetTick>
 8001d4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7ff fa7e 	bl	8001250 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e347      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x7bc>)
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d01f      	beq.n	8001dba <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001da6:	e018      	b.n	8001dda <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001db8:	e00f      	b.n	8001dda <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x7b8>)
 8001dd2:	f023 0304 	bic.w	r3, r3, #4
 8001dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d057      	beq.n	8001e92 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa35 	bl	8001250 <HAL_GetTick>
 8001de6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de8:	e00e      	b.n	8001e08 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fa31 	bl	8001250 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d905      	bls.n	8001e08 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e2f8      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
 8001e00:	46020c00 	.word	0x46020c00
 8001e04:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e08:	4b9c      	ldr	r3, [pc, #624]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0e9      	beq.n	8001dea <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e22:	4b96      	ldr	r3, [pc, #600]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e28:	4a94      	ldr	r2, [pc, #592]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e34:	f7ff fa0c 	bl	8001250 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e2d3      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e4a:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ed      	beq.n	8001e34 <HAL_RCC_OscConfig+0x7ec>
 8001e58:	e053      	b.n	8001f02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e60:	4a86      	ldr	r2, [pc, #536]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f9f0 	bl	8001250 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e2b7      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e82:	4b7e      	ldr	r3, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ed      	bne.n	8001e6c <HAL_RCC_OscConfig+0x824>
 8001e90:	e037      	b.n	8001f02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001e92:	f7ff f9dd 	bl	8001250 <HAL_GetTick>
 8001e96:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f9d9 	bl	8001250 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e2a0      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	4b72      	ldr	r3, [pc, #456]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01a      	beq.n	8001f02 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed2:	4a6a      	ldr	r2, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff f9b7 	bl	8001250 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e27e      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ed      	bne.n	8001ede <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f02:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f10:	4a5a      	ldr	r2, [pc, #360]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d036      	beq.n	8001f94 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f3a:	f7ff f989 	bl	8001250 <HAL_GetTick>
 8001f3e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f42:	f7ff f985 	bl	8001250 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e24e      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f54:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x8fa>
 8001f60:	e018      	b.n	8001f94 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a45      	ldr	r2, [pc, #276]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f6e:	f7ff f96f 	bl	8001250 <HAL_GetTick>
 8001f72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f76:	f7ff f96b 	bl	8001250 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e234      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d036      	beq.n	800200e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d019      	beq.n	8001fdc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001fa8:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fb4:	f7ff f94c 	bl	8001250 <HAL_GetTick>
 8001fb8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f948 	bl	8001250 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e211      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x974>
 8001fda:	e018      	b.n	800200e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8001fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fe8:	f7ff f932 	bl	8001250 <HAL_GetTick>
 8001fec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001ff0:	f7ff f92e 	bl	8001250 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1f7      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07f      	beq.n	800211a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	2b00      	cmp	r3, #0
 8002020:	d062      	beq.n	80020e8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800202c:	6093      	str	r3, [r2, #8]
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	4910      	ldr	r1, [pc, #64]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002048:	d309      	bcc.n	800205e <HAL_RCC_OscConfig+0xa16>
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f023 021f 	bic.w	r2, r3, #31
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4909      	ldr	r1, [pc, #36]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002058:	4313      	orrs	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
 800205c:	e02a      	b.n	80020b4 <HAL_RCC_OscConfig+0xa6c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	da0c      	bge.n	8002080 <HAL_RCC_OscConfig+0xa38>
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	4901      	ldr	r1, [pc, #4]	; (800207c <HAL_RCC_OscConfig+0xa34>)
 8002076:	4313      	orrs	r3, r2
 8002078:	60cb      	str	r3, [r1, #12]
 800207a:	e01b      	b.n	80020b4 <HAL_RCC_OscConfig+0xa6c>
 800207c:	46020c00 	.word	0x46020c00
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d30a      	bcc.n	80020a0 <HAL_RCC_OscConfig+0xa58>
 800208a:	4ba1      	ldr	r3, [pc, #644]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	029b      	lsls	r3, r3, #10
 8002098:	499d      	ldr	r1, [pc, #628]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
 800209e:	e009      	b.n	80020b4 <HAL_RCC_OscConfig+0xa6c>
 80020a0:	4b9b      	ldr	r3, [pc, #620]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	03db      	lsls	r3, r3, #15
 80020ae:	4998      	ldr	r1, [pc, #608]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80020b4:	4b96      	ldr	r3, [pc, #600]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a95      	ldr	r2, [pc, #596]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020c0:	f7ff f8c6 	bl	8001250 <HAL_GetTick>
 80020c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80020c8:	f7ff f8c2 	bl	8001250 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e18b      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80020da:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xa80>
 80020e6:	e018      	b.n	800211a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80020e8:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a88      	ldr	r2, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80020ee:	f023 0310 	bic.w	r3, r3, #16
 80020f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020f4:	f7ff f8ac 	bl	8001250 <HAL_GetTick>
 80020f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80020fc:	f7ff f8a8 	bl	8001250 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e171      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800210e:	4b80      	ldr	r3, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8166 	beq.w	80023f0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212a:	4b79      	ldr	r3, [pc, #484]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b0c      	cmp	r3, #12
 8002134:	f000 80f2 	beq.w	800231c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	2b02      	cmp	r3, #2
 800213e:	f040 80c5 	bne.w	80022cc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800214e:	f7ff f87f 	bl	8001250 <HAL_GetTick>
 8002152:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff f87b 	bl	8001250 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e144      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002168:	4b69      	ldr	r3, [pc, #420]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002174:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d111      	bne.n	80021a6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002188:	4a61      	ldr	r2, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80021a6:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_OscConfig+0xccc>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021ba:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_RCC_OscConfig+0xccc>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a55      	ldr	r2, [pc, #340]	; (8002314 <HAL_RCC_OscConfig+0xccc>)
 80021c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021da:	3a01      	subs	r2, #1
 80021dc:	0212      	lsls	r2, r2, #8
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021e4:	430a      	orrs	r2, r1
 80021e6:	494a      	ldr	r1, [pc, #296]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	628b      	str	r3, [r1, #40]	; 0x28
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0xcd0>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021f8:	3a01      	subs	r2, #1
 80021fa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002202:	3a01      	subs	r2, #1
 8002204:	0252      	lsls	r2, r2, #9
 8002206:	b292      	uxth	r2, r2
 8002208:	4311      	orrs	r1, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800220e:	3a01      	subs	r2, #1
 8002210:	0412      	lsls	r2, r2, #16
 8002212:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800221c:	3a01      	subs	r2, #1
 800221e:	0612      	lsls	r2, r2, #24
 8002220:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002224:	430a      	orrs	r2, r1
 8002226:	493a      	ldr	r1, [pc, #232]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002228:	4313      	orrs	r3, r2
 800222a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800222c:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	4a37      	ldr	r2, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002232:	f023 0310 	bic.w	r3, r3, #16
 8002236:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002248:	f043 0310 	orr.w	r3, r3, #16
 800224c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	f023 020c 	bic.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	492d      	ldr	r1, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800225c:	4313      	orrs	r3, r2
 800225e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0xccc>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_RCC_OscConfig+0xccc>)
 800226e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002272:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002274:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002296:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022a4:	f7fe ffd4 	bl	8001250 <HAL_GetTick>
 80022a8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe ffd0 	bl	8001250 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e099      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xc64>
 80022ca:	e091      	b.n	80023f0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80022d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022d8:	f7fe ffba 	bl	8001250 <HAL_GetTick>
 80022dc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe ffb6 	bl	8001250 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	4a03      	ldr	r2, [pc, #12]	; (8002310 <HAL_RCC_OscConfig+0xcc8>)
 8002304:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002308:	f023 0303 	bic.w	r3, r3, #3
 800230c:	6293      	str	r3, [r2, #40]	; 0x28
 800230e:	e06f      	b.n	80023f0 <HAL_RCC_OscConfig+0xda8>
 8002310:	46020c00 	.word	0x46020c00
 8002314:	46020800 	.word	0x46020800
 8002318:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	2b01      	cmp	r3, #1
 800232e:	d039      	beq.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d132      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d129      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d122      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002368:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d11a      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	0a5b      	lsrs	r3, r3, #9
 8002372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d111      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d108      	bne.n	80023a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	0e1b      	lsrs	r3, r3, #24
 8002396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e024      	b.n	80023f2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d01a      	beq.n	80023f0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 80023c0:	f023 0310 	bic.w	r3, r3, #16
 80023c4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe ff43 	bl	8001250 <HAL_GetTick>
 80023ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80023cc:	bf00      	nop
 80023ce:	f7fe ff3f 	bl	8001250 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d0f9      	beq.n	80023ce <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_RCC_OscConfig+0xdb4>)
 80023ea:	f043 0310 	orr.w	r3, r3, #16
 80023ee:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	46020c00 	.word	0x46020c00

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e1d9      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b9b      	ldr	r3, [pc, #620]	; (8002684 <HAL_RCC_ClockConfig+0x284>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b98      	ldr	r3, [pc, #608]	; (8002684 <HAL_RCC_ClockConfig+0x284>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	4996      	ldr	r1, [pc, #600]	; (8002684 <HAL_RCC_ClockConfig+0x284>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCC_ClockConfig+0x284>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e1c1      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800245c:	429a      	cmp	r2, r3
 800245e:	d908      	bls.n	8002472 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002460:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4986      	ldr	r1, [pc, #536]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800246e:	4313      	orrs	r3, r2
 8002470:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800248c:	429a      	cmp	r2, r3
 800248e:	d909      	bls.n	80024a4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002490:	4b7d      	ldr	r3, [pc, #500]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	497a      	ldr	r1, [pc, #488]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4b74      	ldr	r3, [pc, #464]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024bc:	429a      	cmp	r2, r3
 80024be:	d908      	bls.n	80024d2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	496e      	ldr	r1, [pc, #440]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d010      	beq.n	8002500 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d908      	bls.n	8002500 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80024ee:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4963      	ldr	r1, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80d2 	beq.w	80026b2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d143      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800251c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d110      	bne.n	800254a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002528:	4b57      	ldr	r3, [pc, #348]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800254a:	f7fe fe81 	bl	8001250 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002550:	4b4e      	ldr	r3, [pc, #312]	; (800268c <HAL_RCC_ClockConfig+0x28c>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00f      	beq.n	800257c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800255e:	f7fe fe77 	bl	8001250 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e12b      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCC_ClockConfig+0x28c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002588:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d121      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e112      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025aa:	4b37      	ldr	r3, [pc, #220]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d115      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e106      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80025c2:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0fa      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0f2      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4926      	ldr	r1, [pc, #152]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80025f4:	f7fe fe2c 	bl	8001250 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d112      	bne.n	8002628 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fe24 	bl	8001250 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0d6      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b0c      	cmp	r3, #12
 8002624:	d1ee      	bne.n	8002604 <HAL_RCC_ClockConfig+0x204>
 8002626:	e044      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d112      	bne.n	8002656 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7fe fe0d 	bl	8001250 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0bf      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d1ee      	bne.n	8002632 <HAL_RCC_ClockConfig+0x232>
 8002654:	e02d      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d123      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7fe fdf6 	bl	8001250 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0a8      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_ClockConfig+0x288>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ee      	bne.n	8002660 <HAL_RCC_ClockConfig+0x260>
 8002682:	e016      	b.n	80026b2 <HAL_RCC_ClockConfig+0x2b2>
 8002684:	40022000 	.word	0x40022000
 8002688:	46020c00 	.word	0x46020c00
 800268c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fe fdde 	bl	8001250 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e090      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d208      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80026ce:	4b40      	ldr	r3, [pc, #256]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f023 020f 	bic.w	r2, r3, #15
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	493d      	ldr	r1, [pc, #244]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_RCC_ClockConfig+0x3d4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_RCC_ClockConfig+0x3d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 020f 	bic.w	r2, r3, #15
 80026f6:	4937      	ldr	r1, [pc, #220]	; (80027d4 <HAL_RCC_ClockConfig+0x3d4>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_RCC_ClockConfig+0x3d4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e05b      	b.n	80027c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002728:	429a      	cmp	r2, r3
 800272a:	d208      	bcs.n	800273e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4925      	ldr	r1, [pc, #148]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d012      	beq.n	8002770 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002758:	429a      	cmp	r2, r3
 800275a:	d209      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	4919      	ldr	r1, [pc, #100]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002788:	429a      	cmp	r2, r3
 800278a:	d208      	bcs.n	800279e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	490d      	ldr	r1, [pc, #52]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800279e:	f000 f821 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x3d0>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	490a      	ldr	r1, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x3d8>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x3dc>)
 80027b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x3e0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fd11 	bl	80011e4 <HAL_InitTick>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	46020c00 	.word	0x46020c00
 80027d4:	40022000 	.word	0x40022000
 80027d8:	08003dd8 	.word	0x08003dd8
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b08b      	sub	sp, #44	; 0x2c
 80027e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b7b      	ldr	r3, [pc, #492]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fc:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x34>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d121      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d11e      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002818:	4b71      	ldr	r3, [pc, #452]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002824:	4b6e      	ldr	r3, [pc, #440]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800282a:	0b1b      	lsrs	r3, r3, #12
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	0f1b      	lsrs	r3, r3, #28
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002840:	4a68      	ldr	r2, [pc, #416]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d110      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002854:	e00d      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002856:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b04      	cmp	r3, #4
 8002860:	d102      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002862:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	e004      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d101      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800286e:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002870:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	f040 80ac 	bne.w	80029d2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800287a:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002884:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3301      	adds	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002892:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	08db      	lsrs	r3, r3, #3
 80028a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8086 	beq.w	80029ce <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d003      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0xec>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d022      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x130>
 80028ce:	e043      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028da:	eddf 6a44 	vldr	s13, [pc, #272]	; 80029ec <HAL_RCC_GetSysClockFreq+0x208>
 80028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028f2:	ed97 6a01 	vldr	s12, [r7, #4]
 80028f6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80029f0 <HAL_RCC_GetSysClockFreq+0x20c>
 80028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002912:	e046      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	eddf 6a33 	vldr	s13, [pc, #204]	; 80029ec <HAL_RCC_GetSysClockFreq+0x208>
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002936:	ed97 6a01 	vldr	s12, [r7, #4]
 800293a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80029f0 <HAL_RCC_GetSysClockFreq+0x20c>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002956:	e024      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002980:	ed97 6a01 	vldr	s12, [r7, #4]
 8002984:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80029f0 <HAL_RCC_GetSysClockFreq+0x20c>
 8002988:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800298c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002994:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80029a0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	0e1b      	lsrs	r3, r3, #24
 80029a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ac:	3301      	adds	r3, #1
 80029ae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80029be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c6:	ee17 3a90 	vmov	r3, s15
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	e001      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80029d2:	6a3b      	ldr	r3, [r7, #32]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	372c      	adds	r7, #44	; 0x2c
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	46020c00 	.word	0x46020c00
 80029e4:	08003de8 	.word	0x08003de8
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	4b742400 	.word	0x4b742400
 80029f0:	46000000 	.word	0x46000000

080029f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029f8:	f7ff fef4 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x28>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	4906      	ldr	r1, [pc, #24]	; (8002a20 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a10:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_GetHCLKFreq+0x30>)
 8002a14:	681b      	ldr	r3, [r3, #0]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	46020c00 	.word	0x46020c00
 8002a20:	08003dd8 	.word	0x08003dd8
 8002a24:	20000000 	.word	0x20000000

08002a28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a30:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a3e:	f7fe fda5 	bl	800158c <HAL_PWREx_GetVoltageRange>
 8002a42:	6178      	str	r0, [r7, #20]
 8002a44:	e019      	b.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	4a37      	ldr	r2, [pc, #220]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a56:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a64:	f7fe fd92 	bl	800158c <HAL_PWREx_GetVoltageRange>
 8002a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a70:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a72:	f023 0304 	bic.w	r3, r3, #4
 8002a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a80:	d003      	beq.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a88:	d109      	bne.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a90:	d202      	bcs.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a92:	2301      	movs	r3, #1
 8002a94:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a96:	e033      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a9c:	e030      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa4:	d208      	bcs.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d102      	bne.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002aae:	2303      	movs	r3, #3
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e025      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e035      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002abe:	d90f      	bls.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002acc:	d902      	bls.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	e015      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e012      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	e00f      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae6:	d109      	bne.n	8002afc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aee:	d102      	bne.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e004      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002af6:	2302      	movs	r3, #2
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	e001      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002afc:	2301      	movs	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 020f 	bic.w	r2, r3, #15
 8002b08:	4909      	ldr	r1, [pc, #36]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	46020c00 	.word	0x46020c00
 8002b30:	40022000 	.word	0x40022000

08002b34 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8002b42:	2234      	movs	r2, #52	; 0x34
 8002b44:	2100      	movs	r1, #0
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f001 f8fb 	bl	8003d42 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f1a3 0208 	sub.w	r2, r3, #8
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8002b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	3b04      	subs	r3, #4
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	3b04      	subs	r3, #4
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bbe:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <_tx_byte_pool_create+0x11c>)
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002bda:	f3ef 8310 	mrs	r3, PRIMASK
 8002bde:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8002be0:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8002be2:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002be4:	b672      	cpsid	i
#endif
    return(int_posture);
 8002be6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <_tx_byte_pool_create+0x120>)
 8002bee:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <_tx_byte_pool_create+0x124>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002bf8:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <_tx_byte_pool_create+0x128>)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
 8002c0a:	e011      	b.n	8002c30 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <_tx_byte_pool_create+0x128>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <_tx_byte_pool_create+0x124>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <_tx_byte_pool_create+0x124>)
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3738      	adds	r7, #56	; 0x38
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	ffffeeee 	.word	0xffffeeee
 8002c54:	42595445 	.word	0x42595445
 8002c58:	20000948 	.word	0x20000948
 8002c5c:	20000944 	.word	0x20000944

08002c60 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8002c64:	f000 f960 	bl	8002f28 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8002c68:	f000 fd86 	bl	8003778 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <_tx_initialize_high_level+0x58>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <_tx_initialize_high_level+0x5c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <_tx_initialize_high_level+0x60>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <_tx_initialize_high_level+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_tx_initialize_high_level+0x68>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_tx_initialize_high_level+0x6c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <_tx_initialize_high_level+0x70>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <_tx_initialize_high_level+0x74>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <_tx_initialize_high_level+0x78>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <_tx_initialize_high_level+0x7c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <_tx_initialize_high_level+0x80>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <_tx_initialize_high_level+0x84>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
#endif
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000091c 	.word	0x2000091c
 8002cbc:	20000920 	.word	0x20000920
 8002cc0:	20000924 	.word	0x20000924
 8002cc4:	20000928 	.word	0x20000928
 8002cc8:	2000092c 	.word	0x2000092c
 8002ccc:	20000930 	.word	0x20000930
 8002cd0:	2000093c 	.word	0x2000093c
 8002cd4:	20000940 	.word	0x20000940
 8002cd8:	20000944 	.word	0x20000944
 8002cdc:	20000948 	.word	0x20000948
 8002ce0:	20000934 	.word	0x20000934
 8002ce4:	20000938 	.word	0x20000938

08002ce8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <_tx_initialize_kernel_enter+0x48>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8002cf4:	d00c      	beq.n	8002d10 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <_tx_initialize_kernel_enter+0x48>)
 8002cf8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8002cfc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8002cfe:	f7fd fabb 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8002d02:	f7ff ffad 	bl	8002c60 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <_tx_initialize_kernel_enter+0x4c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <_tx_initialize_kernel_enter+0x4c>)
 8002d0e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <_tx_initialize_kernel_enter+0x48>)
 8002d12:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8002d16:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <_tx_initialize_kernel_enter+0x50>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fbc9 	bl	80004b4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <_tx_initialize_kernel_enter+0x48>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8002d28:	f7fd fae2 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	2000000c 	.word	0x2000000c
 8002d34:	200009ec 	.word	0x200009ec
 8002d38:	2000094c 	.word	0x2000094c

08002d3c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b092      	sub	sp, #72	; 0x48
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8002d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d50:	21ef      	movs	r1, #239	; 0xef
 8002d52:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d54:	f000 fff5 	bl	8003d42 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8002d58:	22b0      	movs	r2, #176	; 0xb0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fff0 	bl	8003d42 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d78:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d7e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d92:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d98:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8002da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8002da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da8:	3b01      	subs	r3, #1
 8002daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dac:	4413      	add	r3, r2
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8002db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d007      	beq.n	8002dce <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002dcc:	e006      	b.n	8002ddc <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2203      	movs	r2, #3
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <_tx_thread_create+0x1cc>)
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8002dee:	4947      	ldr	r1, [pc, #284]	; (8002f0c <_tx_thread_create+0x1d0>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7fd fae3 	bl	80003bc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002df6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e00:	b672      	cpsid	i
    return(int_posture);
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a41      	ldr	r2, [pc, #260]	; (8002f10 <_tx_thread_create+0x1d4>)
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <_tx_thread_create+0x1d8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8002e14:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <_tx_thread_create+0x1dc>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002e2a:	e016      	b.n	8002e5a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <_tx_thread_create+0x1dc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <_tx_thread_create+0x1d8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <_tx_thread_create+0x1d8>)
 8002e62:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <_tx_thread_create+0x1e0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <_tx_thread_create+0x1e0>)
 8002e6c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8002e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d129      	bne.n	8002ec8 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002e74:	f3ef 8305 	mrs	r3, IPSR
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8002e7c:	4b28      	ldr	r3, [pc, #160]	; (8002f20 <_tx_thread_create+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8002e86:	d30d      	bcc.n	8002ea4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <_tx_thread_create+0x1e8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8002e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8002e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ea2:	e001      	b.n	8002ea8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f979 	bl	80031ac <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8002eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01e      	beq.n	8002efe <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ec6:	e01a      	b.n	8002efe <_tx_thread_create+0x1c2>
 8002ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eca:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002eda:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002edc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ede:	b672      	cpsid	i
    return(int_posture);
 8002ee0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <_tx_thread_create+0x1e0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <_tx_thread_create+0x1e0>)
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002efa:	f000 f91d 	bl	8003138 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3748      	adds	r7, #72	; 0x48
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	08003681 	.word	0x08003681
 8002f0c:	08002fa1 	.word	0x08002fa1
 8002f10:	54485244 	.word	0x54485244
 8002f14:	20000960 	.word	0x20000960
 8002f18:	2000095c 	.word	0x2000095c
 8002f1c:	200009ec 	.word	0x200009ec
 8002f20:	2000000c 	.word	0x2000000c
 8002f24:	20000958 	.word	0x20000958

08002f28 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <_tx_thread_initialize+0x50>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <_tx_thread_initialize+0x54>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <_tx_thread_initialize+0x58>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <_tx_thread_initialize+0x5c>)
 8002f40:	2220      	movs	r2, #32
 8002f42:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	2100      	movs	r1, #0
 8002f48:	480f      	ldr	r0, [pc, #60]	; (8002f88 <_tx_thread_initialize+0x60>)
 8002f4a:	f000 fefa 	bl	8003d42 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <_tx_thread_initialize+0x64>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <_tx_thread_initialize+0x68>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <_tx_thread_initialize+0x6c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <_tx_thread_initialize+0x70>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <_tx_thread_initialize+0x74>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <_tx_thread_initialize+0x74>)
 8002f70:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000954 	.word	0x20000954
 8002f7c:	20000958 	.word	0x20000958
 8002f80:	20000964 	.word	0x20000964
 8002f84:	20000968 	.word	0x20000968
 8002f88:	2000096c 	.word	0x2000096c
 8002f8c:	2000095c 	.word	0x2000095c
 8002f90:	20000960 	.word	0x20000960
 8002f94:	200009ec 	.word	0x200009ec
 8002f98:	200009f0 	.word	0x200009f0
 8002f9c:	200009f4 	.word	0x200009f4

08002fa0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <_tx_thread_shell_entry+0x8c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <_tx_thread_shell_entry+0x90>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <_tx_thread_shell_entry+0x90>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69f8      	ldr	r0, [r7, #28]
 8002fc6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fcc:	607b      	str	r3, [r7, #4]
    return(posture);
 8002fce:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002fd0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002fd2:	b672      	cpsid	i
    return(int_posture);
 8002fd4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8002fd6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <_tx_thread_shell_entry+0x94>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <_tx_thread_shell_entry+0x94>)
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f383 8810 	msr	PRIMASK, r3
}
 8002ffe:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8003000:	f3ef 8314 	mrs	r3, CONTROL
 8003004:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8003006:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f383 8814 	msr	CONTROL, r3
}
 800301c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800301e:	69f8      	ldr	r0, [r7, #28]
 8003020:	f000 f9c4 	bl	80033ac <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8003024:	bf00      	nop
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000954 	.word	0x20000954
 8003030:	200009f0 	.word	0x200009f0
 8003034:	200009ec 	.word	0x200009ec

08003038 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800304a:	b672      	cpsid	i
    return(int_posture);
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800304e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003050:	4b35      	ldr	r3, [pc, #212]	; (8003128 <_tx_thread_sleep+0xf0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <_tx_thread_sleep+0x36>
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8003068:	2313      	movs	r3, #19
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
 800306c:	e056      	b.n	800311c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800306e:	f3ef 8305 	mrs	r3, IPSR
 8003072:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003074:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <_tx_thread_sleep+0xf4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <_tx_thread_sleep+0x5a>
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800308c:	2313      	movs	r3, #19
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
 8003090:	e044      	b.n	800311c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	4a26      	ldr	r2, [pc, #152]	; (8003130 <_tx_thread_sleep+0xf8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <_tx_thread_sleep+0x74>
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80030a6:	2313      	movs	r3, #19
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
 80030aa:	e037      	b.n	800311c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <_tx_thread_sleep+0x8c>
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80030be:	2300      	movs	r3, #0
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
 80030c2:	e02b      	b.n	800311c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <_tx_thread_sleep+0xfc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <_tx_thread_sleep+0xa6>
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80030d8:	2313      	movs	r3, #19
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
 80030dc:	e01e      	b.n	800311c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	2204      	movs	r2, #4
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	2201      	movs	r2, #1
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <_tx_thread_sleep+0xfc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <_tx_thread_sleep+0xfc>)
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800310e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003110:	f000 f94c 	bl	80033ac <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800311e:	4618      	mov	r0, r3
 8003120:	3738      	adds	r7, #56	; 0x38
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000954 	.word	0x20000954
 800312c:	2000000c 	.word	0x2000000c
 8003130:	20000a9c 	.word	0x20000a9c
 8003134:	200009ec 	.word	0x200009ec

08003138 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <_tx_thread_system_preempt_check+0x64>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d121      	bne.n	800318e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_tx_thread_system_preempt_check+0x68>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <_tx_thread_system_preempt_check+0x6c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	429a      	cmp	r2, r3
 800315c:	d017      	beq.n	800318e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <_tx_thread_system_preempt_check+0x70>)
 8003160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003164:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003166:	f3ef 8305 	mrs	r3, IPSR
 800316a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800316c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003178:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800317a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800317c:	b662      	cpsie	i
}
 800317e:	bf00      	nop
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f383 8810 	msr	PRIMASK, r3
}
 800318a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800318c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800318e:	bf00      	nop
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	200009ec 	.word	0x200009ec
 80031a0:	20000954 	.word	0x20000954
 80031a4:	20000958 	.word	0x20000958
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b096      	sub	sp, #88	; 0x58
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80031b4:	f3ef 8310 	mrs	r3, PRIMASK
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80031be:	b672      	cpsid	i
    return(int_posture);
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80031c2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	334c      	adds	r3, #76	; 0x4c
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fbaf 	bl	8003934 <_tx_timer_system_deactivate>
 80031d6:	e002      	b.n	80031de <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80031de:	4b6c      	ldr	r3, [pc, #432]	; (8003390 <_tx_thread_system_resume+0x1e4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4a6a      	ldr	r2, [pc, #424]	; (8003390 <_tx_thread_system_resume+0x1e4>)
 80031e6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 8083 	bne.w	80032f8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8097 	beq.w	800332a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	2b00      	cmp	r3, #0
 8003202:	d172      	bne.n	80032ea <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003210:	4a60      	ldr	r2, [pc, #384]	; (8003394 <_tx_thread_system_resume+0x1e8>)
 8003212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003218:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800321a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d154      	bne.n	80032ca <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003220:	495c      	ldr	r1, [pc, #368]	; (8003394 <_tx_thread_system_resume+0x1e8>)
 8003222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8003236:	2201      	movs	r2, #1
 8003238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <_tx_thread_system_resume+0x1ec>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	4313      	orrs	r3, r2
 8003248:	4a53      	ldr	r2, [pc, #332]	; (8003398 <_tx_thread_system_resume+0x1ec>)
 800324a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <_tx_thread_system_resume+0x1f0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003252:	429a      	cmp	r2, r3
 8003254:	d269      	bcs.n	800332a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8003256:	4a51      	ldr	r2, [pc, #324]	; (800339c <_tx_thread_system_resume+0x1f0>)
 8003258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <_tx_thread_system_resume+0x1f4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8003262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003268:	4a4d      	ldr	r2, [pc, #308]	; (80033a0 <_tx_thread_system_resume+0x1f4>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e05c      	b.n	800332a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8003270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003276:	429a      	cmp	r2, r3
 8003278:	d257      	bcs.n	800332a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800327a:	4a49      	ldr	r2, [pc, #292]	; (80033a0 <_tx_thread_system_resume+0x1f4>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800328c:	4b40      	ldr	r3, [pc, #256]	; (8003390 <_tx_thread_system_resume+0x1e4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d174      	bne.n	8003382 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003298:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <_tx_thread_system_resume+0x1f8>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80032a0:	f3ef 8305 	mrs	r3, IPSR
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10c      	bne.n	80032c6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80032b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80032b6:	b662      	cpsie	i
}
 80032b8:	bf00      	nop
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	bf00      	nop
}
 80032c6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80032c8:	e05b      	b.n	8003382 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80032d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e6:	621a      	str	r2, [r3, #32]
 80032e8:	e01f      	b.n	800332a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2203      	movs	r2, #3
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
 80032f6:	e018      	b.n	800332a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d014      	beq.n	800332a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b02      	cmp	r3, #2
 8003306:	d010      	beq.n	800332a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
 800331c:	e005      	b.n	800332a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2203      	movs	r2, #3
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <_tx_thread_system_resume+0x1fc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003332:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <_tx_thread_system_resume+0x1f4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003342:	429a      	cmp	r2, r3
 8003344:	d020      	beq.n	8003388 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <_tx_thread_system_resume+0x1e4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800334c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11a      	bne.n	8003388 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <_tx_thread_system_resume+0x1f8>)
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003358:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800335a:	f3ef 8305 	mrs	r3, IPSR
 800335e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003360:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003366:	f3ef 8310 	mrs	r3, PRIMASK
 800336a:	613b      	str	r3, [r7, #16]
    return(posture);
 800336c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800336e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003370:	b662      	cpsie	i
}
 8003372:	bf00      	nop
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	bf00      	nop
}
 8003380:	e001      	b.n	8003386 <_tx_thread_system_resume+0x1da>
                                return;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <_tx_thread_system_resume+0x1dc>
 8003386:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8003388:	3758      	adds	r7, #88	; 0x58
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200009ec 	.word	0x200009ec
 8003394:	2000096c 	.word	0x2000096c
 8003398:	20000964 	.word	0x20000964
 800339c:	20000968 	.word	0x20000968
 80033a0:	20000958 	.word	0x20000958
 80033a4:	e000ed04 	.word	0xe000ed04
 80033a8:	20000954 	.word	0x20000954

080033ac <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b09e      	sub	sp, #120	; 0x78
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <_tx_thread_system_suspend+0x210>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033ba:	f3ef 8310 	mrs	r3, PRIMASK
 80033be:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80033c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80033c4:	b672      	cpsid	i
    return(int_posture);
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80033c8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d112      	bne.n	80033f8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80033de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d004      	beq.n	80033f0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	334c      	adds	r3, #76	; 0x4c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fa40 	bl	8003870 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4a72      	ldr	r2, [pc, #456]	; (80035c0 <_tx_thread_system_suspend+0x214>)
 80033f6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80033f8:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <_tx_thread_system_suspend+0x218>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	4a71      	ldr	r2, [pc, #452]	; (80035c4 <_tx_thread_system_suspend+0x218>)
 8003400:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	2b01      	cmp	r3, #1
 8003408:	f040 80a6 	bne.w	8003558 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800341e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	d015      	beq.n	8003452 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800342c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8003432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003434:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003436:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8003438:	4a63      	ldr	r2, [pc, #396]	; (80035c8 <_tx_thread_system_suspend+0x21c>)
 800343a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d157      	bne.n	80034f6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8003446:	4960      	ldr	r1, [pc, #384]	; (80035c8 <_tx_thread_system_suspend+0x21c>)
 8003448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800344c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003450:	e051      	b.n	80034f6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8003452:	4a5d      	ldr	r2, [pc, #372]	; (80035c8 <_tx_thread_system_suspend+0x21c>)
 8003454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003456:	2100      	movs	r1, #0
 8003458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800345c:	2201      	movs	r2, #1
 800345e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8003466:	4b59      	ldr	r3, [pc, #356]	; (80035cc <_tx_thread_system_suspend+0x220>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346c:	43db      	mvns	r3, r3
 800346e:	4013      	ands	r3, r2
 8003470:	4a56      	ldr	r2, [pc, #344]	; (80035cc <_tx_thread_system_suspend+0x220>)
 8003472:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8003474:	2300      	movs	r3, #0
 8003476:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8003478:	4b54      	ldr	r3, [pc, #336]	; (80035cc <_tx_thread_system_suspend+0x220>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800347e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003480:	2b00      	cmp	r3, #0
 8003482:	d12b      	bne.n	80034dc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003484:	4b52      	ldr	r3, [pc, #328]	; (80035d0 <_tx_thread_system_suspend+0x224>)
 8003486:	2220      	movs	r2, #32
 8003488:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800348a:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <_tx_thread_system_suspend+0x228>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003492:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800349c:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <_tx_thread_system_suspend+0x218>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 8081 	bne.w	80035ac <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80034aa:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <_tx_thread_system_suspend+0x22c>)
 80034ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034b2:	f3ef 8305 	mrs	r3, IPSR
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10c      	bne.n	80034d8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80034be:	f3ef 8310 	mrs	r3, PRIMASK
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80034c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80034c8:	b662      	cpsie	i
}
 80034ca:	bf00      	nop
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	bf00      	nop
}
 80034d8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80034da:	e067      	b.n	80035ac <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80034dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80034ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f0:	4413      	add	r3, r2
 80034f2:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <_tx_thread_system_suspend+0x224>)
 80034f4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80034f6:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <_tx_thread_system_suspend+0x228>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d12b      	bne.n	8003558 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003500:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <_tx_thread_system_suspend+0x224>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <_tx_thread_system_suspend+0x21c>)
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <_tx_thread_system_suspend+0x228>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	f383 8810 	msr	PRIMASK, r3
}
 8003518:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <_tx_thread_system_suspend+0x218>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8003520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003522:	2b00      	cmp	r3, #0
 8003524:	d144      	bne.n	80035b0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003526:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <_tx_thread_system_suspend+0x22c>)
 8003528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800352e:	f3ef 8305 	mrs	r3, IPSR
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800353a:	f3ef 8310 	mrs	r3, PRIMASK
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003544:	b662      	cpsie	i
}
 8003546:	bf00      	nop
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	bf00      	nop
}
 8003554:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8003556:	e02b      	b.n	80035b0 <_tx_thread_system_suspend+0x204>
 8003558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800355a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <_tx_thread_system_suspend+0x228>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800356a:	429a      	cmp	r2, r3
 800356c:	d022      	beq.n	80035b4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <_tx_thread_system_suspend+0x218>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8003574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003576:	2b00      	cmp	r3, #0
 8003578:	d11c      	bne.n	80035b4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <_tx_thread_system_suspend+0x22c>)
 800357c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003580:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003582:	f3ef 8305 	mrs	r3, IPSR
 8003586:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003588:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800358e:	f3ef 8310 	mrs	r3, PRIMASK
 8003592:	617b      	str	r3, [r7, #20]
    return(posture);
 8003594:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8003596:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003598:	b662      	cpsie	i
}
 800359a:	bf00      	nop
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f383 8810 	msr	PRIMASK, r3
}
 80035a6:	bf00      	nop
}
 80035a8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80035aa:	e003      	b.n	80035b4 <_tx_thread_system_suspend+0x208>
                return;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <_tx_thread_system_suspend+0x20a>
            return;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <_tx_thread_system_suspend+0x20a>
    return;
 80035b4:	bf00      	nop
}
 80035b6:	3778      	adds	r7, #120	; 0x78
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000954 	.word	0x20000954
 80035c0:	20000f58 	.word	0x20000f58
 80035c4:	200009ec 	.word	0x200009ec
 80035c8:	2000096c 	.word	0x2000096c
 80035cc:	20000964 	.word	0x20000964
 80035d0:	20000968 	.word	0x20000968
 80035d4:	20000958 	.word	0x20000958
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80035e2:	4b21      	ldr	r3, [pc, #132]	; (8003668 <_tx_thread_time_slice+0x8c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035e8:	f3ef 8310 	mrs	r3, PRIMASK
 80035ec:	60fb      	str	r3, [r7, #12]
    return(posture);
 80035ee:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80035f0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80035f2:	b672      	cpsid	i
    return(int_posture);
 80035f4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80035f6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <_tx_thread_time_slice+0x90>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d024      	beq.n	800364e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	2b00      	cmp	r3, #0
 800360a:	d120      	bne.n	800364e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <_tx_thread_time_slice+0x94>)
 800361a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	429a      	cmp	r2, r3
 8003624:	d013      	beq.n	800364e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	429a      	cmp	r2, r3
 8003630:	d10d      	bne.n	800364e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	6a12      	ldr	r2, [r2, #32]
 800363a:	490e      	ldr	r1, [pc, #56]	; (8003674 <_tx_thread_time_slice+0x98>)
 800363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <_tx_thread_time_slice+0x9c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <_tx_thread_time_slice+0x98>)
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <_tx_thread_time_slice+0xa0>)
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000954 	.word	0x20000954
 800366c:	200009fc 	.word	0x200009fc
 8003670:	20000f58 	.word	0x20000f58
 8003674:	2000096c 	.word	0x2000096c
 8003678:	20000968 	.word	0x20000968
 800367c:	20000958 	.word	0x20000958

08003680 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800368c:	f3ef 8310 	mrs	r3, PRIMASK
 8003690:	617b      	str	r3, [r7, #20]
    return(posture);
 8003692:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8003694:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003696:	b672      	cpsid	i
    return(int_posture);
 8003698:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800369a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d10e      	bne.n	80036c2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <_tx_thread_timeout+0x74>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <_tx_thread_timeout+0x74>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f383 8810 	msr	PRIMASK, r3
}
 80036b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80036ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036bc:	f7ff fd76 	bl	80031ac <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80036c0:	e013      	b.n	80036ea <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f383 8810 	msr	PRIMASK, r3
}
 80036da:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e8:	4798      	blx	r3
}
 80036ea:	bf00      	nop
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200009ec 	.word	0x200009ec

080036f8 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	60bb      	str	r3, [r7, #8]
    return(posture);
 8003704:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8003706:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003708:	b672      	cpsid	i
    return(int_posture);
 800370a:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 800370c:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <_tx_time_get+0x38>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8003720:	693b      	ldr	r3, [r7, #16]
}
 8003722:	4618      	mov	r0, r3
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	200009f8 	.word	0x200009f8

08003734 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800373a:	f3ef 8310 	mrs	r3, PRIMASK
 800373e:	607b      	str	r3, [r7, #4]
    return(posture);
 8003740:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003742:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003744:	b672      	cpsid	i
    return(int_posture);
 8003746:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8003748:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <_tx_timer_expiration_process+0x3c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <_tx_timer_expiration_process+0x3c>)
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003760:	4804      	ldr	r0, [pc, #16]	; (8003774 <_tx_timer_expiration_process+0x40>)
 8003762:	f7ff fd23 	bl	80031ac <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200009ec 	.word	0x200009ec
 8003774:	20000a9c 	.word	0x20000a9c

08003778 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <_tx_timer_initialize+0xa8>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <_tx_timer_initialize+0xac>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <_tx_timer_initialize+0xb0>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003790:	4b26      	ldr	r3, [pc, #152]	; (800382c <_tx_timer_initialize+0xb4>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <_tx_timer_initialize+0xb8>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	2100      	movs	r1, #0
 80037a0:	4824      	ldr	r0, [pc, #144]	; (8003834 <_tx_timer_initialize+0xbc>)
 80037a2:	f000 face 	bl	8003d42 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <_tx_timer_initialize+0xc0>)
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <_tx_timer_initialize+0xbc>)
 80037aa:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <_tx_timer_initialize+0xc4>)
 80037ae:	4a21      	ldr	r2, [pc, #132]	; (8003834 <_tx_timer_initialize+0xbc>)
 80037b0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <_tx_timer_initialize+0xc8>)
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <_tx_timer_initialize+0xcc>)
 80037b6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <_tx_timer_initialize+0xc8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3304      	adds	r3, #4
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <_tx_timer_initialize+0xc8>)
 80037c0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <_tx_timer_initialize+0xd0>)
 80037c4:	4a21      	ldr	r2, [pc, #132]	; (800384c <_tx_timer_initialize+0xd4>)
 80037c6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <_tx_timer_initialize+0xd8>)
 80037ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ce:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <_tx_timer_initialize+0xdc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <_tx_timer_initialize+0xd0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <_tx_timer_initialize+0xd8>)
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	491d      	ldr	r1, [pc, #116]	; (8003854 <_tx_timer_initialize+0xdc>)
 80037e0:	6809      	ldr	r1, [r1, #0]
 80037e2:	481c      	ldr	r0, [pc, #112]	; (8003854 <_tx_timer_initialize+0xdc>)
 80037e4:	6800      	ldr	r0, [r0, #0]
 80037e6:	2400      	movs	r4, #0
 80037e8:	9405      	str	r4, [sp, #20]
 80037ea:	2400      	movs	r4, #0
 80037ec:	9404      	str	r4, [sp, #16]
 80037ee:	9003      	str	r0, [sp, #12]
 80037f0:	9102      	str	r1, [sp, #8]
 80037f2:	9201      	str	r2, [sp, #4]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <_tx_timer_initialize+0xe0>)
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <_tx_timer_initialize+0xe4>)
 80037fa:	4919      	ldr	r1, [pc, #100]	; (8003860 <_tx_timer_initialize+0xe8>)
 80037fc:	4819      	ldr	r0, [pc, #100]	; (8003864 <_tx_timer_initialize+0xec>)
 80037fe:	f7ff fa9d 	bl	8002d3c <_tx_thread_create>
 8003802:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e5      	bne.n	80037d6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <_tx_timer_initialize+0xf0>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8003810:	4b16      	ldr	r3, [pc, #88]	; (800386c <_tx_timer_initialize+0xf4>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bd90      	pop	{r4, r7, pc}
 800381e:	bf00      	nop
 8003820:	200009f8 	.word	0x200009f8
 8003824:	20000f58 	.word	0x20000f58
 8003828:	200009fc 	.word	0x200009fc
 800382c:	20000a8c 	.word	0x20000a8c
 8003830:	20000a98 	.word	0x20000a98
 8003834:	20000a00 	.word	0x20000a00
 8003838:	20000a80 	.word	0x20000a80
 800383c:	20000a88 	.word	0x20000a88
 8003840:	20000a84 	.word	0x20000a84
 8003844:	20000a7c 	.word	0x20000a7c
 8003848:	20000b4c 	.word	0x20000b4c
 800384c:	20000b58 	.word	0x20000b58
 8003850:	20000b50 	.word	0x20000b50
 8003854:	20000b54 	.word	0x20000b54
 8003858:	4154494d 	.word	0x4154494d
 800385c:	080039a5 	.word	0x080039a5
 8003860:	08003da0 	.word	0x08003da0
 8003864:	20000a9c 	.word	0x20000a9c
 8003868:	20000a90 	.word	0x20000a90
 800386c:	20000a94 	.word	0x20000a94

08003870 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d04a      	beq.n	800391a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d046      	beq.n	800391a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d142      	bne.n	800391a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b20      	cmp	r3, #32
 8003898:	d902      	bls.n	80038a0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800389a:	231f      	movs	r3, #31
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	e002      	b.n	80038a6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <_tx_timer_system_activate+0xb8>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <_tx_timer_system_activate+0xbc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d30b      	bcc.n	80038d4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <_tx_timer_system_activate+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	109b      	asrs	r3, r3, #2
 80038c6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <_tx_timer_system_activate+0xc0>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e011      	b.n	8003914 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800391a:	bf00      	nop
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20000a88 	.word	0x20000a88
 800392c:	20000a84 	.word	0x20000a84
 8003930:	20000a80 	.word	0x20000a80

08003934 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d026      	beq.n	8003996 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	429a      	cmp	r2, r3
 8003954:	d108      	bne.n	8003968 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d117      	bne.n	8003990 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e013      	b.n	8003990 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	429a      	cmp	r2, r3
 8003982:	d105      	bne.n	8003990 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
    }
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b098      	sub	sp, #96	; 0x60
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80039ac:	2300      	movs	r3, #0
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a73      	ldr	r2, [pc, #460]	; (8003b80 <_tx_timer_thread_entry+0x1dc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	f040 80de 	bne.w	8003b76 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80039ba:	f3ef 8310 	mrs	r3, PRIMASK
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80039c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80039c4:	b672      	cpsid	i
    return(int_posture);
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80039ca:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <_tx_timer_thread_entry+0x1e0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f107 020c 	add.w	r2, r7, #12
 80039de:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <_tx_timer_thread_entry+0x1e0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <_tx_timer_thread_entry+0x1e0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <_tx_timer_thread_entry+0x1e0>)
 80039f0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80039f2:	4b64      	ldr	r3, [pc, #400]	; (8003b84 <_tx_timer_thread_entry+0x1e0>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <_tx_timer_thread_entry+0x1e4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d103      	bne.n	8003a06 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <_tx_timer_thread_entry+0x1e8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <_tx_timer_thread_entry+0x1e0>)
 8003a04:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8003a06:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <_tx_timer_thread_entry+0x1ec>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	f383 8810 	msr	PRIMASK, r3
}
 8003a16:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a22:	b672      	cpsid	i
    return(int_posture);
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8003a26:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8003a28:	e07f      	b.n	8003b2a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8003a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d102      	bne.n	8003a46 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e00e      	b.n	8003a64 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a50:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a56:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8003a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5a:	f107 020c 	add.w	r2, r7, #12
 8003a5e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a62:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8003a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d911      	bls.n	8003a90 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7e:	f107 0208 	add.w	r2, r7, #8
 8003a82:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a88:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	e01a      	b.n	8003ac6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8003a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8003aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	f107 0208 	add.w	r2, r7, #8
 8003ab2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8003aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	e002      	b.n	8003ac6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8003ac6:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <_tx_timer_thread_entry+0x1f0>)
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8003ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8003ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ae2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003aee:	b672      	cpsid	i
    return(int_posture);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8003af2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <_tx_timer_thread_entry+0x1f0>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d105      	bne.n	8003b0e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8003b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8003b08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b0a:	f7ff feb1 	bl	8003870 <_tx_timer_system_activate>
 8003b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1e:	623b      	str	r3, [r7, #32]
    return(posture);
 8003b20:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003b22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b24:	b672      	cpsid	i
    return(int_posture);
 8003b26:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8003b28:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f47f af7c 	bne.w	8003a2a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <_tx_timer_thread_entry+0x1ec>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d116      	bne.n	8003b68 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <_tx_timer_thread_entry+0x1f4>)
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b40:	2203      	movs	r2, #3
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b46:	2201      	movs	r2, #1
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <_tx_timer_thread_entry+0x1f8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <_tx_timer_thread_entry+0x1f8>)
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f383 8810 	msr	PRIMASK, r3
}
 8003b5e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003b60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003b62:	f7ff fc23 	bl	80033ac <_tx_thread_system_suspend>
 8003b66:	e728      	b.n	80039ba <_tx_timer_thread_entry+0x16>
 8003b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f383 8810 	msr	PRIMASK, r3
}
 8003b72:	bf00      	nop
            TX_DISABLE
 8003b74:	e721      	b.n	80039ba <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8003b76:	bf00      	nop
 8003b78:	3760      	adds	r7, #96	; 0x60
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	4154494d 	.word	0x4154494d
 8003b84:	20000a88 	.word	0x20000a88
 8003b88:	20000a84 	.word	0x20000a84
 8003b8c:	20000a80 	.word	0x20000a80
 8003b90:	20000a8c 	.word	0x20000a8c
 8003b94:	20000a98 	.word	0x20000a98
 8003b98:	20000a9c 	.word	0x20000a9c
 8003b9c:	200009ec 	.word	0x200009ec

08003ba0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b092      	sub	sp, #72	; 0x48
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbc:	e075      	b.n	8003caa <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	2b34      	cmp	r3, #52	; 0x34
 8003bc2:	d002      	beq.n	8003bca <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc8:	e06f      	b.n	8003caa <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003bca:	f3ef 8310 	mrs	r3, PRIMASK
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003bd4:	b672      	cpsid	i
    return(int_posture);
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <_txe_byte_pool_create+0x128>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <_txe_byte_pool_create+0x128>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <_txe_byte_pool_create+0x12c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bfa:	e009      	b.n	8003c10 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d00b      	beq.n	8003c1c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8003c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c10:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <_txe_byte_pool_create+0x130>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3f0      	bcc.n	8003bfc <_txe_byte_pool_create+0x5c>
 8003c1a:	e000      	b.n	8003c1e <_txe_byte_pool_create+0x7e>
                break;
 8003c1c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c22:	623b      	str	r3, [r7, #32]
    return(posture);
 8003c24:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003c26:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c28:	b672      	cpsid	i
    return(int_posture);
 8003c2a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <_txe_byte_pool_create+0x128>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <_txe_byte_pool_create+0x128>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003c44:	f7ff fa78 	bl	8003138 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d102      	bne.n	8003c56 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8003c50:	2302      	movs	r3, #2
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
 8003c54:	e029      	b.n	8003caa <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c60:	e023      	b.n	8003caa <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b63      	cmp	r3, #99	; 0x63
 8003c66:	d802      	bhi.n	8003c6e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8003c68:	2305      	movs	r3, #5
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6c:	e01d      	b.n	8003caa <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <_txe_byte_pool_create+0x134>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <_txe_byte_pool_create+0x138>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003c7c:	2313      	movs	r3, #19
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003c80:	f3ef 8305 	mrs	r3, IPSR
 8003c84:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003c86:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <_txe_byte_pool_create+0x13c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003c92:	f3ef 8305 	mrs	r3, IPSR
 8003c96:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003c98:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <_txe_byte_pool_create+0x13c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003ca4:	d201      	bcs.n	8003caa <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003ca6:	2313      	movs	r3, #19
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7fe ff3c 	bl	8002b34 <_tx_byte_pool_create>
 8003cbc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8003cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3748      	adds	r7, #72	; 0x48
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200009ec 	.word	0x200009ec
 8003ccc:	20000944 	.word	0x20000944
 8003cd0:	20000948 	.word	0x20000948
 8003cd4:	20000954 	.word	0x20000954
 8003cd8:	20000a9c 	.word	0x20000a9c
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4d0d      	ldr	r5, [pc, #52]	; (8003d18 <__libc_init_array+0x38>)
 8003ce4:	2600      	movs	r6, #0
 8003ce6:	4c0d      	ldr	r4, [pc, #52]	; (8003d1c <__libc_init_array+0x3c>)
 8003ce8:	1b64      	subs	r4, r4, r5
 8003cea:	10a4      	asrs	r4, r4, #2
 8003cec:	42a6      	cmp	r6, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	4d0b      	ldr	r5, [pc, #44]	; (8003d20 <__libc_init_array+0x40>)
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	4c0b      	ldr	r4, [pc, #44]	; (8003d24 <__libc_init_array+0x44>)
 8003cf6:	f000 f82d 	bl	8003d54 <_init>
 8003cfa:	1b64      	subs	r4, r4, r5
 8003cfc:	10a4      	asrs	r4, r4, #2
 8003cfe:	42a6      	cmp	r6, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d08:	3601      	adds	r6, #1
 8003d0a:	4798      	blx	r3
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d12:	3601      	adds	r6, #1
 8003d14:	4798      	blx	r3
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	08003e28 	.word	0x08003e28
 8003d1c:	08003e28 	.word	0x08003e28
 8003d20:	08003e28 	.word	0x08003e28
 8003d24:	08003e2c 	.word	0x08003e2c

08003d28 <memcpy>:
 8003d28:	440a      	add	r2, r1
 8003d2a:	1e43      	subs	r3, r0, #1
 8003d2c:	4291      	cmp	r1, r2
 8003d2e:	d100      	bne.n	8003d32 <memcpy+0xa>
 8003d30:	4770      	bx	lr
 8003d32:	b510      	push	{r4, lr}
 8003d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d38:	4291      	cmp	r1, r2
 8003d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d3e:	d1f9      	bne.n	8003d34 <memcpy+0xc>
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <memset>:
 8003d42:	4402      	add	r2, r0
 8003d44:	4603      	mov	r3, r0
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d100      	bne.n	8003d4c <memset+0xa>
 8003d4a:	4770      	bx	lr
 8003d4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d50:	e7f9      	b.n	8003d46 <memset+0x4>
	...

08003d54 <_init>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr

08003d60 <_fini>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr
